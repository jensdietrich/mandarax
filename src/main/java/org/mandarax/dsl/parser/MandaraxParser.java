// $ANTLR 3.3 Nov 30, 2010 12:45:30 /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g 2010-12-24 14:50:08

/**
 * Parser generated by ANTLR. The grammar is based on fragements taken from the Java 1.5 developed 
 * by Terence Parr and released under the BSD license. See http://www.antlr.org/grammar/1152141644268/Java.g
 * for details.
 * @author jens dietrich
 */ 
package org.mandarax.dsl.parser;
import org.mandarax.dsl.*;
import static org.mandarax.dsl.Utils.*;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class MandaraxParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NEWLINE", "Identifier", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "FloatingPointLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "CharacterLiteral", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'import'", "'static'", "'.'", "'*'", "';'", "'package'", "':'", "'->'", "'include'", "'@'", "'='", "'relationship'", "'rel'", "'('", "')'", "'extends'", "'queries'", "'{'", "'}'", "','", "'public'", "'private'", "'['", "']'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'true'", "'false'", "'&'", "'?'", "'|'", "'=='", "'!='", "'instanceof'", "'avg'", "'sum'", "'min'", "'max'", "'count'", "'in'", "'<='", "'>='", "'<'", "'>'", "'+'", "'-'", "'/'", "'%'", "'~'", "'!'", "'null'", "'new'"
    };
    public static final int EOF=-1;
    public static final int T__24=24;
    public static final int T__25=25;
    public static final int T__26=26;
    public static final int T__27=27;
    public static final int T__28=28;
    public static final int T__29=29;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__33=33;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__50=50;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__59=59;
    public static final int T__60=60;
    public static final int T__61=61;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__73=73;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int NEWLINE=4;
    public static final int Identifier=5;
    public static final int StringLiteral=6;
    public static final int HexLiteral=7;
    public static final int OctalLiteral=8;
    public static final int DecimalLiteral=9;
    public static final int FloatingPointLiteral=10;
    public static final int HexDigit=11;
    public static final int IntegerTypeSuffix=12;
    public static final int Exponent=13;
    public static final int FloatTypeSuffix=14;
    public static final int EscapeSequence=15;
    public static final int CharacterLiteral=16;
    public static final int UnicodeEscape=17;
    public static final int OctalEscape=18;
    public static final int Letter=19;
    public static final int JavaIDDigit=20;
    public static final int WS=21;
    public static final int COMMENT=22;
    public static final int LINE_COMMENT=23;

    // delegates
    // delegators


        public MandaraxParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public MandaraxParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[157+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return MandaraxParser.tokenNames; }
    public String getGrammarFileName() { return "/home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g"; }


      private Context context = new Context(); 
      protected ErrorReporter errorHandler = new ErrorReporter();
      
      private Position pos(Token token) {
      	return new Position(token.getLine(),token.getCharPositionInLine());
      }
      private Position pos(ASTNode expression) {
      	return expression.getPosition().clone();
      }
      public void displayRecognitionError(String[] tokenNames,RecognitionException e) {
      	String msg = getErrorMessage(e, tokenNames);
      	errorHandler.handleError(msg,e);
      }



    public static class compilationUnit_return extends ParserRuleReturnScope {
        public CompilationUnit value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:76:1: compilationUnit returns [CompilationUnit value] : ( NEWLINE )* p= packageDeclaration NEWLINE ( NEWLINE | importDeclaration )* ( NEWLINE | (obj= objectDeclaration ) | (rel= relationshipDefinition ) )+ ;
    public final compilationUnit_return compilationUnit() throws RecognitionException {
        compilationUnit_return retval = new compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEWLINE1=null;
        Token NEWLINE2=null;
        Token NEWLINE3=null;
        Token NEWLINE5=null;
        packageDeclaration_return p = null;

        objectDeclaration_return obj = null;

        relationshipDefinition_return rel = null;

        importDeclaration_return importDeclaration4 = null;


        CommonTree NEWLINE1_tree=null;
        CommonTree NEWLINE2_tree=null;
        CommonTree NEWLINE3_tree=null;
        CommonTree NEWLINE5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:77:5: ( ( NEWLINE )* p= packageDeclaration NEWLINE ( NEWLINE | importDeclaration )* ( NEWLINE | (obj= objectDeclaration ) | (rel= relationshipDefinition ) )+ )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:77:7: ( NEWLINE )* p= packageDeclaration NEWLINE ( NEWLINE | importDeclaration )* ( NEWLINE | (obj= objectDeclaration ) | (rel= relationshipDefinition ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:77:7: ( NEWLINE )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==NEWLINE) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:0:0: NEWLINE
            	    {
            	    NEWLINE1=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_compilationUnit71); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE1_tree = (CommonTree)adaptor.create(NEWLINE1);
            	    adaptor.addChild(root_0, NEWLINE1_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_packageDeclaration_in_compilationUnit78);
            p=packageDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());
            NEWLINE2=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_compilationUnit80); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NEWLINE2_tree = (CommonTree)adaptor.create(NEWLINE2);
            adaptor.addChild(root_0, NEWLINE2_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:77:47: ( NEWLINE | importDeclaration )*
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==NEWLINE) ) {
                    int LA2_1 = input.LA(2);

                    if ( (synpred2_Mandarax()) ) {
                        alt2=1;
                    }


                }
                else if ( (LA2_0==24) ) {
                    alt2=2;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:77:48: NEWLINE
            	    {
            	    NEWLINE3=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_compilationUnit83); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE3_tree = (CommonTree)adaptor.create(NEWLINE3);
            	    adaptor.addChild(root_0, NEWLINE3_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:77:56: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit85);
            	    importDeclaration4=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.value = new CompilationUnit(pos(p.value),context);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:5: ( NEWLINE | (obj= objectDeclaration ) | (rel= relationshipDefinition ) )+
            int cnt3=0;
            loop3:
            do {
                int alt3=4;
                switch ( input.LA(1) ) {
                case NEWLINE:
                    {
                    int LA3_2 = input.LA(2);

                    if ( (synpred4_Mandarax()) ) {
                        alt3=1;
                    }
                    else if ( (synpred6_Mandarax()) ) {
                        alt3=3;
                    }


                    }
                    break;
                case Identifier:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                    {
                    alt3=2;
                    }
                    break;
                case 33:
                case 35:
                case 36:
                    {
                    alt3=3;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:6: NEWLINE
            	    {
            	    NEWLINE5=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_compilationUnit97); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE5_tree = (CommonTree)adaptor.create(NEWLINE5);
            	    adaptor.addChild(root_0, NEWLINE5_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:16: (obj= objectDeclaration )
            	    {
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:16: (obj= objectDeclaration )
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:17: obj= objectDeclaration
            	    {
            	    pushFollow(FOLLOW_objectDeclaration_in_compilationUnit106);
            	    obj=objectDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(obj.value);
            	    }

            	    }


            	    }
            	    break;
            	case 3 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:69: (rel= relationshipDefinition )
            	    {
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:69: (rel= relationshipDefinition )
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:70: rel= relationshipDefinition
            	    {
            	    pushFollow(FOLLOW_relationshipDefinition_in_compilationUnit118);
            	    rel=relationshipDefinition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(rel.value);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt3 >= 1 ) break loop3;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(3, input);
                        throw eee;
                }
                cnt3++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        public ImportDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:82:1: importDeclaration returns [ImportDeclaration value] : i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';' ;
    public final importDeclaration_return importDeclaration() throws RecognitionException {
        importDeclaration_return retval = new importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token w=null;
        Token char_literal6=null;
        Token char_literal7=null;
        qualifiedName2_return n = null;


        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree w_tree=null;
        CommonTree char_literal6_tree=null;
        CommonTree char_literal7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:5: (i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:9: i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,24,FOLLOW_24_in_importDeclaration156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:20: ( (s= 'static' )? )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:21: (s= 'static' )?
            {
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:23: (s= 'static' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==25) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:0:0: s= 'static'
                    {
                    s=(Token)match(input,25,FOLLOW_25_in_importDeclaration163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s_tree = (CommonTree)adaptor.create(s);
                    adaptor.addChild(root_0, s_tree);
                    }

                    }
                    break;

            }


            }

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:36: (n= qualifiedName2 )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:37: n= qualifiedName2
            {
            pushFollow(FOLLOW_qualifiedName2_in_importDeclaration170);
            n=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());

            }

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:55: (w= '.' '*' )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==26) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:83:56: w= '.' '*'
                    {
                    w=(Token)match(input,26,FOLLOW_26_in_importDeclaration176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    w_tree = (CommonTree)adaptor.create(w);
                    adaptor.addChild(root_0, w_tree);
                    }
                    char_literal6=(Token)match(input,27,FOLLOW_27_in_importDeclaration178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
                    adaptor.addChild(root_0, char_literal6_tree);
                    }

                    }
                    break;

            }

            char_literal7=(Token)match(input,28,FOLLOW_28_in_importDeclaration182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal7_tree = (CommonTree)adaptor.create(char_literal7);
            adaptor.addChild(root_0, char_literal7_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new ImportDeclaration(pos(i),context,n.value,s!=null,w!=null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        public PackageDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:86:1: packageDeclaration returns [PackageDeclaration value] : p= 'package' (n= qualifiedName2 ) ';' ;
    public final packageDeclaration_return packageDeclaration() throws RecognitionException {
        packageDeclaration_return retval = new packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token p=null;
        Token char_literal8=null;
        qualifiedName2_return n = null;


        CommonTree p_tree=null;
        CommonTree char_literal8_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:87:5: (p= 'package' (n= qualifiedName2 ) ';' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:87:8: p= 'package' (n= qualifiedName2 ) ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            p=(Token)match(input,29,FOLLOW_29_in_packageDeclaration214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            p_tree = (CommonTree)adaptor.create(p);
            adaptor.addChild(root_0, p_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:87:20: (n= qualifiedName2 )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:87:21: n= qualifiedName2
            {
            pushFollow(FOLLOW_qualifiedName2_in_packageDeclaration219);
            n=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());

            }

            char_literal8=(Token)match(input,28,FOLLOW_28_in_packageDeclaration222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal8_tree = (CommonTree)adaptor.create(char_literal8);
            adaptor.addChild(root_0, char_literal8_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new PackageDeclaration(pos(p),context,n.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class rule_return extends ParserRuleReturnScope {
        public Rule value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:90:1: rule returns [Rule value] : (a= annotationList )? id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';' ;
    public final rule_return rule() throws RecognitionException {
        rule_return retval = new rule_return();
        retval.start = input.LT(1);
        int rule_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token char_literal9=null;
        Token string_literal10=null;
        Token char_literal11=null;
        annotationList_return a = null;

        conjunction_return body = null;

        functionInvocation_return concl = null;


        CommonTree id_tree=null;
        CommonTree char_literal9_tree=null;
        CommonTree string_literal10_tree=null;
        CommonTree char_literal11_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:91:5: ( (a= annotationList )? id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:91:9: (a= annotationList )? id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:91:9: (a= annotationList )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==NEWLINE||LA6_0==33) ) {
                alt6=1;
            }
            else if ( (LA6_0==Identifier) ) {
                int LA6_2 = input.LA(2);

                if ( (synpred9_Mandarax()) ) {
                    alt6=1;
                }
            }
            switch (alt6) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:91:10: a= annotationList
                    {
                    pushFollow(FOLLOW_annotationList_in_rule258);
                    a=annotationList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

                    }
                    break;

            }

            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_rule266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (CommonTree)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            char_literal9=(Token)match(input,30,FOLLOW_30_in_rule268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal9_tree = (CommonTree)adaptor.create(char_literal9);
            adaptor.addChild(root_0, char_literal9_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:91:51: (body= conjunction )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( ((LA7_0>=Identifier && LA7_0<=DecimalLiteral)||LA7_0==37||(LA7_0>=56 && LA7_0<=57)||(LA7_0>=64 && LA7_0<=68)||LA7_0==75||(LA7_0>=78 && LA7_0<=81)) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:91:52: body= conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_rule275);
                    body=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());

                    }
                    break;

            }

            string_literal10=(Token)match(input,31,FOLLOW_31_in_rule280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal10_tree = (CommonTree)adaptor.create(string_literal10);
            adaptor.addChild(root_0, string_literal10_tree);
            }
            pushFollow(FOLLOW_functionInvocation_in_rule286);
            concl=functionInvocation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concl.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new Rule(pos(id),context,id.getText(),body==null?null:body.value,(FunctionInvocation)concl.value);
            }
            if ( state.backtracking==0 ) {
              retval.value.addAnnotations(a==null?new ArrayList<Annotation>():a.values);
            }
            char_literal11=(Token)match(input,28,FOLLOW_28_in_rule300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal11_tree = (CommonTree)adaptor.create(char_literal11);
            adaptor.addChild(root_0, char_literal11_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, rule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rule"

    public static class external_return extends ParserRuleReturnScope {
        public ExternalFacts value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "external"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:96:1: external returns [ExternalFacts value] : (a= annotationList )? id= Identifier ':' 'include' provider= expression ';' ;
    public final external_return external() throws RecognitionException {
        external_return retval = new external_return();
        retval.start = input.LT(1);
        int external_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token char_literal12=null;
        Token string_literal13=null;
        Token char_literal14=null;
        annotationList_return a = null;

        expression_return provider = null;


        CommonTree id_tree=null;
        CommonTree char_literal12_tree=null;
        CommonTree string_literal13_tree=null;
        CommonTree char_literal14_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:97:5: ( (a= annotationList )? id= Identifier ':' 'include' provider= expression ';' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:97:9: (a= annotationList )? id= Identifier ':' 'include' provider= expression ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:97:9: (a= annotationList )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==NEWLINE||LA8_0==33) ) {
                alt8=1;
            }
            else if ( (LA8_0==Identifier) ) {
                int LA8_2 = input.LA(2);

                if ( (synpred11_Mandarax()) ) {
                    alt8=1;
                }
            }
            switch (alt8) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:97:10: a= annotationList
                    {
                    pushFollow(FOLLOW_annotationList_in_external332);
                    a=annotationList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

                    }
                    break;

            }

            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_external340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (CommonTree)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            char_literal12=(Token)match(input,30,FOLLOW_30_in_external342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal12_tree = (CommonTree)adaptor.create(char_literal12);
            adaptor.addChild(root_0, char_literal12_tree);
            }
            string_literal13=(Token)match(input,32,FOLLOW_32_in_external344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal13_tree = (CommonTree)adaptor.create(string_literal13);
            adaptor.addChild(root_0, string_literal13_tree);
            }
            pushFollow(FOLLOW_expression_in_external350);
            provider=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, provider.getTree());
            char_literal14=(Token)match(input,28,FOLLOW_28_in_external352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal14_tree = (CommonTree)adaptor.create(char_literal14);
            adaptor.addChild(root_0, char_literal14_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new ExternalFacts(pos(id),context,id.getText(),provider.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, external_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "external"

    public static class annotation_return extends ParserRuleReturnScope {
        public Annotation value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:101:1: annotation returns [Annotation value] : '@' key= qualifiedName2 '=' val= StringLiteral ;
    public final annotation_return annotation() throws RecognitionException {
        annotation_return retval = new annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token val=null;
        Token char_literal15=null;
        Token char_literal16=null;
        qualifiedName2_return key = null;


        CommonTree val_tree=null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal16_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:102:5: ( '@' key= qualifiedName2 '=' val= StringLiteral )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:102:7: '@' key= qualifiedName2 '=' val= StringLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal15=(Token)match(input,33,FOLLOW_33_in_annotation383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal15_tree = (CommonTree)adaptor.create(char_literal15);
            adaptor.addChild(root_0, char_literal15_tree);
            }
            pushFollow(FOLLOW_qualifiedName2_in_annotation389);
            key=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, key.getTree());
            char_literal16=(Token)match(input,34,FOLLOW_34_in_annotation391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal16_tree = (CommonTree)adaptor.create(char_literal16);
            adaptor.addChild(root_0, char_literal16_tree);
            }
            val=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_annotation397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            val_tree = (CommonTree)adaptor.create(val);
            adaptor.addChild(root_0, val_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new Annotation(pos(key.start),context,key.value,val.getText().substring(1,val.getText().length()-1));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class objectDeclaration_return extends ParserRuleReturnScope {
        public ObjectDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectDeclaration"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:105:1: objectDeclaration returns [ObjectDeclaration value] : t= type i= Identifier '=' x= expression ';' ;
    public final objectDeclaration_return objectDeclaration() throws RecognitionException {
        objectDeclaration_return retval = new objectDeclaration_return();
        retval.start = input.LT(1);
        int objectDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal17=null;
        Token char_literal18=null;
        type_return t = null;

        expression_return x = null;


        CommonTree i_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal18_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:106:5: (t= type i= Identifier '=' x= expression ';' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:106:7: t= type i= Identifier '=' x= expression ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_objectDeclaration426);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_objectDeclaration430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            char_literal17=(Token)match(input,34,FOLLOW_34_in_objectDeclaration432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal17_tree = (CommonTree)adaptor.create(char_literal17);
            adaptor.addChild(root_0, char_literal17_tree);
            }
            pushFollow(FOLLOW_expression_in_objectDeclaration438);
            x=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, x.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new ObjectDeclaration(pos(t.start),context,t.value,i.getText(),x.value);
            }
            char_literal18=(Token)match(input,28,FOLLOW_28_in_objectDeclaration441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal18_tree = (CommonTree)adaptor.create(char_literal18);
            adaptor.addChild(root_0, char_literal18_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, objectDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectDeclaration"

    public static class annotationList_return extends ParserRuleReturnScope {
        public List<Annotation> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationList"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:110:1: annotationList returns [List<Annotation> values] : ( NEWLINE | (a= annotation ) )* ;
    public final annotationList_return annotationList() throws RecognitionException {
        annotationList_return retval = new annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEWLINE19=null;
        annotation_return a = null;


        CommonTree NEWLINE19_tree=null;

        retval.values = new ArrayList<Annotation>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:112:1: ( ( NEWLINE | (a= annotation ) )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:112:3: ( NEWLINE | (a= annotation ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:112:3: ( NEWLINE | (a= annotation ) )*
            loop9:
            do {
                int alt9=3;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==NEWLINE) ) {
                    alt9=1;
                }
                else if ( (LA9_0==33) ) {
                    alt9=2;
                }


                switch (alt9) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:112:4: NEWLINE
            	    {
            	    NEWLINE19=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_annotationList475); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE19_tree = (CommonTree)adaptor.create(NEWLINE19);
            	    adaptor.addChild(root_0, NEWLINE19_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:112:12: (a= annotation )
            	    {
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:112:12: (a= annotation )
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:112:13: a= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList482);
            	    a=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(a.value);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, annotationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationList"

    public static class relationshipDefinition_return extends ParserRuleReturnScope {
        public RelationshipDefinition value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationshipDefinition"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:116:1: relationshipDefinition returns [RelationshipDefinition value] : (a= annotationList )? q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ( NEWLINE )* '{' ( NEWLINE | x= external | r= rule )+ '}' ;
    public final relationshipDefinition_return relationshipDefinition() throws RecognitionException {
        relationshipDefinition_return retval = new relationshipDefinition_return();
        retval.start = input.LT(1);
        int relationshipDefinition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token q=null;
        Token ti=null;
        Token char_literal20=null;
        Token char_literal21=null;
        Token string_literal22=null;
        Token string_literal23=null;
        Token NEWLINE24=null;
        Token char_literal25=null;
        Token NEWLINE26=null;
        Token char_literal27=null;
        annotationList_return a = null;

        variableDeclarationList_return tp = null;

        qualifiedNameList2_return supers = null;

        functionDeclarationList_return queries = null;

        external_return x = null;

        rule_return r = null;


        CommonTree q_tree=null;
        CommonTree ti_tree=null;
        CommonTree char_literal20_tree=null;
        CommonTree char_literal21_tree=null;
        CommonTree string_literal22_tree=null;
        CommonTree string_literal23_tree=null;
        CommonTree NEWLINE24_tree=null;
        CommonTree char_literal25_tree=null;
        CommonTree NEWLINE26_tree=null;
        CommonTree char_literal27_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:117:5: ( (a= annotationList )? q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ( NEWLINE )* '{' ( NEWLINE | x= external | r= rule )+ '}' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:117:7: (a= annotationList )? q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ( NEWLINE )* '{' ( NEWLINE | x= external | r= rule )+ '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:117:7: (a= annotationList )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==NEWLINE||LA10_0==33) ) {
                alt10=1;
            }
            else if ( ((LA10_0>=35 && LA10_0<=36)) ) {
                int LA10_2 = input.LA(2);

                if ( (synpred14_Mandarax()) ) {
                    alt10=1;
                }
            }
            switch (alt10) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:117:8: a= annotationList
                    {
                    pushFollow(FOLLOW_annotationList_in_relationshipDefinition520);
                    a=annotationList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

                    }
                    break;

            }

            q=(Token)input.LT(1);
            if ( (input.LA(1)>=35 && input.LA(1)<=36) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(q));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            ti=(Token)match(input,Identifier,FOLLOW_Identifier_in_relationshipDefinition534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ti_tree = (CommonTree)adaptor.create(ti);
            adaptor.addChild(root_0, ti_tree);
            }
            char_literal20=(Token)match(input,37,FOLLOW_37_in_relationshipDefinition536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal20_tree = (CommonTree)adaptor.create(char_literal20);
            adaptor.addChild(root_0, char_literal20_tree);
            }
            pushFollow(FOLLOW_variableDeclarationList_in_relationshipDefinition542);
            tp=variableDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            char_literal21=(Token)match(input,38,FOLLOW_38_in_relationshipDefinition544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal21_tree = (CommonTree)adaptor.create(char_literal21);
            adaptor.addChild(root_0, char_literal21_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:117:105: ( 'extends' supers= qualifiedNameList2 )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==39) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:117:106: 'extends' supers= qualifiedNameList2
                    {
                    string_literal22=(Token)match(input,39,FOLLOW_39_in_relationshipDefinition547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal22_tree = (CommonTree)adaptor.create(string_literal22);
                    adaptor.addChild(root_0, string_literal22_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList2_in_relationshipDefinition553);
                    supers=qualifiedNameList2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supers.getTree());

                    }
                    break;

            }

            string_literal23=(Token)match(input,40,FOLLOW_40_in_relationshipDefinition562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal23_tree = (CommonTree)adaptor.create(string_literal23);
            adaptor.addChild(root_0, string_literal23_tree);
            }
            pushFollow(FOLLOW_functionDeclarationList_in_relationshipDefinition568);
            queries=functionDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, queries.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new RelationshipDefinition(pos(q),context,ti.getText(),tp.value,supers==null?new ArrayList<String>():supers.value,queries.values);
            }
            if ( state.backtracking==0 ) {
              retval.value.addAnnotations(a==null?new ArrayList<Annotation>():a.values);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:5: ( NEWLINE )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==NEWLINE) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:0:0: NEWLINE
            	    {
            	    NEWLINE24=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_relationshipDefinition586); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE24_tree = (CommonTree)adaptor.create(NEWLINE24);
            	    adaptor.addChild(root_0, NEWLINE24_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);

            char_literal25=(Token)match(input,41,FOLLOW_41_in_relationshipDefinition589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = (CommonTree)adaptor.create(char_literal25);
            adaptor.addChild(root_0, char_literal25_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:18: ( NEWLINE | x= external | r= rule )+
            int cnt13=0;
            loop13:
            do {
                int alt13=4;
                alt13 = dfa13.predict(input);
                switch (alt13) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:19: NEWLINE
            	    {
            	    NEWLINE26=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_relationshipDefinition592); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE26_tree = (CommonTree)adaptor.create(NEWLINE26);
            	    adaptor.addChild(root_0, NEWLINE26_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:28: x= external
            	    {
            	    pushFollow(FOLLOW_external_in_relationshipDefinition599);
            	    x=external();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, x.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.addExternal(x.value);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:71: r= rule
            	    {
            	    pushFollow(FOLLOW_rule_in_relationshipDefinition606);
            	    r=rule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, r.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.addRule(r.value);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt13 >= 1 ) break loop13;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(13, input);
                        throw eee;
                }
                cnt13++;
            } while (true);

            char_literal27=(Token)match(input,42,FOLLOW_42_in_relationshipDefinition611); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal27_tree = (CommonTree)adaptor.create(char_literal27);
            adaptor.addChild(root_0, char_literal27_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, relationshipDefinition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationshipDefinition"

    public static class variableDeclaration_return extends ParserRuleReturnScope {
        public VariableDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaration"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:124:1: variableDeclaration returns [VariableDeclaration value] : t= type n= Identifier ;
    public final variableDeclaration_return variableDeclaration() throws RecognitionException {
        variableDeclaration_return retval = new variableDeclaration_return();
        retval.start = input.LT(1);
        int variableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        type_return t = null;


        CommonTree n_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:125:5: (t= type n= Identifier )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:125:7: t= type n= Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_variableDeclaration644);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            n=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new VariableDeclaration(pos(t.start),context,t.value,n.getText());
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, variableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaration"

    public static class variableDeclarationList_return extends ParserRuleReturnScope {
        public List<VariableDeclaration> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarationList"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:128:1: variableDeclarationList returns [List<VariableDeclaration> value] : part1= variableDeclaration ( ',' part2= variableDeclaration )* ;
    public final variableDeclarationList_return variableDeclarationList() throws RecognitionException {
        variableDeclarationList_return retval = new variableDeclarationList_return();
        retval.start = input.LT(1);
        int variableDeclarationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal28=null;
        variableDeclaration_return part1 = null;

        variableDeclaration_return part2 = null;


        CommonTree char_literal28_tree=null;

        retval.value = new ArrayList<VariableDeclaration>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:130:5: (part1= variableDeclaration ( ',' part2= variableDeclaration )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:130:7: part1= variableDeclaration ( ',' part2= variableDeclaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList690);
            part1=variableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(part1.value);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:130:62: ( ',' part2= variableDeclaration )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==43) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:130:63: ',' part2= variableDeclaration
            	    {
            	    char_literal28=(Token)match(input,43,FOLLOW_43_in_variableDeclarationList695); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal28_tree = (CommonTree)adaptor.create(char_literal28);
            	    adaptor.addChild(root_0, char_literal28_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList701);
            	    part2=variableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, variableDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationList"

    public static class functionDeclaration_return extends ParserRuleReturnScope {
        public FunctionDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclaration"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:133:1: functionDeclaration returns [FunctionDeclaration value] : v= visibility n= Identifier '(' p= nameList ')' ;
    public final functionDeclaration_return functionDeclaration() throws RecognitionException {
        functionDeclaration_return retval = new functionDeclaration_return();
        retval.start = input.LT(1);
        int functionDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        Token char_literal29=null;
        Token char_literal30=null;
        visibility_return v = null;

        nameList_return p = null;


        CommonTree n_tree=null;
        CommonTree char_literal29_tree=null;
        CommonTree char_literal30_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:134:5: (v= visibility n= Identifier '(' p= nameList ')' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:134:7: v= visibility n= Identifier '(' p= nameList ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_visibility_in_functionDeclaration739);
            v=visibility();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
            n=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionDeclaration745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            char_literal29=(Token)match(input,37,FOLLOW_37_in_functionDeclaration747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal29_tree = (CommonTree)adaptor.create(char_literal29);
            adaptor.addChild(root_0, char_literal29_tree);
            }
            pushFollow(FOLLOW_nameList_in_functionDeclaration753);
            p=nameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());
            char_literal30=(Token)match(input,38,FOLLOW_38_in_functionDeclaration755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal30_tree = (CommonTree)adaptor.create(char_literal30);
            adaptor.addChild(root_0, char_literal30_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new FunctionDeclaration(pos(n),context,v.value,n.getText(),p.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, functionDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclaration"

    public static class functionDeclarationList_return extends ParserRuleReturnScope {
        public List<FunctionDeclaration> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclarationList"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:137:1: functionDeclarationList returns [List<FunctionDeclaration> values] : part1= functionDeclaration ( ',' part2= functionDeclaration )* ;
    public final functionDeclarationList_return functionDeclarationList() throws RecognitionException {
        functionDeclarationList_return retval = new functionDeclarationList_return();
        retval.start = input.LT(1);
        int functionDeclarationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal31=null;
        functionDeclaration_return part1 = null;

        functionDeclaration_return part2 = null;


        CommonTree char_literal31_tree=null;

        retval.values = new ArrayList<FunctionDeclaration>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:139:5: (part1= functionDeclaration ( ',' part2= functionDeclaration )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:139:7: part1= functionDeclaration ( ',' part2= functionDeclaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_functionDeclaration_in_functionDeclarationList794);
            part1=functionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(part1.value);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:139:63: ( ',' part2= functionDeclaration )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==43) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:139:64: ',' part2= functionDeclaration
            	    {
            	    char_literal31=(Token)match(input,43,FOLLOW_43_in_functionDeclarationList799); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal31_tree = (CommonTree)adaptor.create(char_literal31);
            	    adaptor.addChild(root_0, char_literal31_tree);
            	    }
            	    pushFollow(FOLLOW_functionDeclaration_in_functionDeclarationList805);
            	    part2=functionDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, functionDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclarationList"

    public static class visibility_return extends ParserRuleReturnScope {
        public Visibility value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "visibility"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:142:1: visibility returns [Visibility value] : ( 'public' | ( 'private' ) )? ;
    public final visibility_return visibility() throws RecognitionException {
        visibility_return retval = new visibility_return();
        retval.start = input.LT(1);
        int visibility_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal32=null;
        Token string_literal33=null;

        CommonTree string_literal32_tree=null;
        CommonTree string_literal33_tree=null;

        retval.value = Visibility.PUBLIC;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:144:6: ( ( 'public' | ( 'private' ) )? )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:144:8: ( 'public' | ( 'private' ) )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:144:8: ( 'public' | ( 'private' ) )?
            int alt16=3;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==44) ) {
                alt16=1;
            }
            else if ( (LA16_0==45) ) {
                alt16=2;
            }
            switch (alt16) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:144:9: 'public'
                    {
                    string_literal32=(Token)match(input,44,FOLLOW_44_in_visibility837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal32_tree = (CommonTree)adaptor.create(string_literal32);
                    adaptor.addChild(root_0, string_literal32_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:144:20: ( 'private' )
                    {
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:144:20: ( 'private' )
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:144:21: 'private'
                    {
                    string_literal33=(Token)match(input,45,FOLLOW_45_in_visibility842); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal33_tree = (CommonTree)adaptor.create(string_literal33);
                    adaptor.addChild(root_0, string_literal33_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Visibility.PRIVATE;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, visibility_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "visibility"

    public static class expression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:148:1: expression returns [Expression value] : r= conditionalExpression ;
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        conditionalExpression_return r = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:149:5: (r= conditionalExpression )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:149:9: r= conditionalExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression889);
            r=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r.getTree());
            if ( state.backtracking==0 ) {
              retval.value =r.value;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:152:1: constantDeclarator : Identifier ;
    public final constantDeclarator_return constantDeclarator() throws RecognitionException {
        constantDeclarator_return retval = new constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token Identifier34=null;

        CommonTree Identifier34_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:153:5: ( Identifier )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:153:9: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier34=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier34_tree = (CommonTree)adaptor.create(Identifier34);
            adaptor.addChild(root_0, Identifier34_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class typeName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:156:1: typeName : qualifiedName ;
    public final typeName_return typeName() throws RecognitionException {
        typeName_return retval = new typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        CommonTree root_0 = null;

        qualifiedName_return qualifiedName35 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:157:5: ( qualifiedName )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:157:9: qualifiedName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_typeName935);
            qualifiedName35=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName35.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:160:1: type returns [String value] : (i= classOrInterfaceType ( '[' ']' )* | j= primitiveType ( '[' ']' )* );
    public final type_return type() throws RecognitionException {
        type_return retval = new type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal36=null;
        Token char_literal37=null;
        Token char_literal38=null;
        Token char_literal39=null;
        classOrInterfaceType_return i = null;

        primitiveType_return j = null;


        CommonTree char_literal36_tree=null;
        CommonTree char_literal37_tree=null;
        CommonTree char_literal38_tree=null;
        CommonTree char_literal39_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:161:2: (i= classOrInterfaceType ( '[' ']' )* | j= primitiveType ( '[' ']' )* )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==Identifier) ) {
                alt19=1;
            }
            else if ( ((LA19_0>=48 && LA19_0<=55)) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:161:4: i= classOrInterfaceType ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_type957);
                    i=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:161:29: ( '[' ']' )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==46) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:161:30: '[' ']'
                    	    {
                    	    char_literal36=(Token)match(input,46,FOLLOW_46_in_type960); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal36_tree = (CommonTree)adaptor.create(char_literal36);
                    	    adaptor.addChild(root_0, char_literal36_tree);
                    	    }
                    	    char_literal37=(Token)match(input,47,FOLLOW_47_in_type962); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal37_tree = (CommonTree)adaptor.create(char_literal37);
                    	    adaptor.addChild(root_0, char_literal37_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.value = i.value;
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:162:4: j= primitiveType ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type975);
                    j=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, j.getTree());
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:162:22: ( '[' ']' )*
                    loop18:
                    do {
                        int alt18=2;
                        int LA18_0 = input.LA(1);

                        if ( (LA18_0==46) ) {
                            alt18=1;
                        }


                        switch (alt18) {
                    	case 1 :
                    	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:162:23: '[' ']'
                    	    {
                    	    char_literal38=(Token)match(input,46,FOLLOW_46_in_type978); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal38_tree = (CommonTree)adaptor.create(char_literal38);
                    	    adaptor.addChild(root_0, char_literal38_tree);
                    	    }
                    	    char_literal39=(Token)match(input,47,FOLLOW_47_in_type980); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal39_tree = (CommonTree)adaptor.create(char_literal39);
                    	    adaptor.addChild(root_0, char_literal39_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop18;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.value = j.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:165:1: classOrInterfaceType returns [String value] : i= Identifier ( '.' i= Identifier )* ;
    public final classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        classOrInterfaceType_return retval = new classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal40=null;

        CommonTree i_tree=null;
        CommonTree char_literal40_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:166:2: (i= Identifier ( '.' i= Identifier )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:166:4: i= Identifier ( '.' i= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType1004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =i.getText();
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:166:41: ( '.' i= Identifier )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==26) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:166:42: '.' i= Identifier
            	    {
            	    char_literal40=(Token)match(input,26,FOLLOW_26_in_classOrInterfaceType1009); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal40_tree = (CommonTree)adaptor.create(char_literal40);
            	    adaptor.addChild(root_0, char_literal40_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType1015); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =retval.value+'.'+i.getText();
            	    }

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class primitiveType_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:170:1: primitiveType returns [String value] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final primitiveType_return primitiveType() throws RecognitionException {
        primitiveType_return retval = new primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal41=null;
        Token string_literal42=null;
        Token string_literal43=null;
        Token string_literal44=null;
        Token string_literal45=null;
        Token string_literal46=null;
        Token string_literal47=null;
        Token string_literal48=null;

        CommonTree string_literal41_tree=null;
        CommonTree string_literal42_tree=null;
        CommonTree string_literal43_tree=null;
        CommonTree string_literal44_tree=null;
        CommonTree string_literal45_tree=null;
        CommonTree string_literal46_tree=null;
        CommonTree string_literal47_tree=null;
        CommonTree string_literal48_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:171:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt21=8;
            switch ( input.LA(1) ) {
            case 48:
                {
                alt21=1;
                }
                break;
            case 49:
                {
                alt21=2;
                }
                break;
            case 50:
                {
                alt21=3;
                }
                break;
            case 51:
                {
                alt21=4;
                }
                break;
            case 52:
                {
                alt21=5;
                }
                break;
            case 53:
                {
                alt21=6;
                }
                break;
            case 54:
                {
                alt21=7;
                }
                break;
            case 55:
                {
                alt21=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:171:9: 'boolean'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal41=(Token)match(input,48,FOLLOW_48_in_primitiveType1043); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal41_tree = (CommonTree)adaptor.create(string_literal41);
                    adaptor.addChild(root_0, string_literal41_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="boolean";
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:172:9: 'char'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal42=(Token)match(input,49,FOLLOW_49_in_primitiveType1055); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal42_tree = (CommonTree)adaptor.create(string_literal42);
                    adaptor.addChild(root_0, string_literal42_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="char";
                    }

                    }
                    break;
                case 3 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:173:9: 'byte'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal43=(Token)match(input,50,FOLLOW_50_in_primitiveType1067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal43_tree = (CommonTree)adaptor.create(string_literal43);
                    adaptor.addChild(root_0, string_literal43_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="byte";
                    }

                    }
                    break;
                case 4 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:174:9: 'short'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal44=(Token)match(input,51,FOLLOW_51_in_primitiveType1079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal44_tree = (CommonTree)adaptor.create(string_literal44);
                    adaptor.addChild(root_0, string_literal44_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="short";
                    }

                    }
                    break;
                case 5 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:175:9: 'int'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal45=(Token)match(input,52,FOLLOW_52_in_primitiveType1091); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal45_tree = (CommonTree)adaptor.create(string_literal45);
                    adaptor.addChild(root_0, string_literal45_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="int";
                    }

                    }
                    break;
                case 6 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:176:9: 'long'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal46=(Token)match(input,53,FOLLOW_53_in_primitiveType1103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal46_tree = (CommonTree)adaptor.create(string_literal46);
                    adaptor.addChild(root_0, string_literal46_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="boolean";
                    }

                    }
                    break;
                case 7 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:177:9: 'float'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal47=(Token)match(input,54,FOLLOW_54_in_primitiveType1115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal47_tree = (CommonTree)adaptor.create(string_literal47);
                    adaptor.addChild(root_0, string_literal47_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="long";
                    }

                    }
                    break;
                case 8 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:178:9: 'double'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal48=(Token)match(input,55,FOLLOW_55_in_primitiveType1127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal48_tree = (CommonTree)adaptor.create(string_literal48);
                    adaptor.addChild(root_0, string_literal48_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="double";
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:181:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        qualifiedNameList_return retval = new qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal50=null;
        qualifiedName_return qualifiedName49 = null;

        qualifiedName_return qualifiedName51 = null;


        CommonTree char_literal50_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:182:5: ( qualifiedName ( ',' qualifiedName )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:182:9: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList1153);
            qualifiedName49=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName49.getTree());
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:182:23: ( ',' qualifiedName )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==43) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:182:24: ',' qualifiedName
            	    {
            	    char_literal50=(Token)match(input,43,FOLLOW_43_in_qualifiedNameList1156); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal50_tree = (CommonTree)adaptor.create(char_literal50);
            	    adaptor.addChild(root_0, char_literal50_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList1158);
            	    qualifiedName51=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName51.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:185:1: qualifiedName returns [Expression value] : i= Identifier ( '.' j= Identifier )* ;
    public final qualifiedName_return qualifiedName() throws RecognitionException {
        qualifiedName_return retval = new qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal52=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal52_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:186:2: (i= Identifier ( '.' j= Identifier )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:186:4: i= Identifier ( '.' j= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName1182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =new Variable(pos(i),context,i.getText());
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:186:70: ( '.' j= Identifier )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==26) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:186:71: '.' j= Identifier
            	    {
            	    char_literal52=(Token)match(input,26,FOLLOW_26_in_qualifiedName1187); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal52_tree = (CommonTree)adaptor.create(char_literal52);
            	    adaptor.addChild(root_0, char_literal52_tree);
            	    }
            	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName1193); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    j_tree = (CommonTree)adaptor.create(j);
            	    adaptor.addChild(root_0, j_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =new MemberAccess(pos(i),context,retval.value,j.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class qualifiedNameList2_return extends ParserRuleReturnScope {
        public List<String> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList2"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:189:1: qualifiedNameList2 returns [List<String> value] : i= qualifiedName2 ( ',' j= qualifiedName2 )* ;
    public final qualifiedNameList2_return qualifiedNameList2() throws RecognitionException {
        qualifiedNameList2_return retval = new qualifiedNameList2_return();
        retval.start = input.LT(1);
        int qualifiedNameList2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal53=null;
        qualifiedName2_return i = null;

        qualifiedName2_return j = null;


        CommonTree char_literal53_tree=null;

        retval.value = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:191:5: (i= qualifiedName2 ( ',' j= qualifiedName2 )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:191:9: i= qualifiedName2 ( ',' j= qualifiedName2 )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName2_in_qualifiedNameList21226);
            i=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(i.value);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:191:51: ( ',' j= qualifiedName2 )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==43) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:191:52: ',' j= qualifiedName2
            	    {
            	    char_literal53=(Token)match(input,43,FOLLOW_43_in_qualifiedNameList21231); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal53_tree = (CommonTree)adaptor.create(char_literal53);
            	    adaptor.addChild(root_0, char_literal53_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName2_in_qualifiedNameList21237);
            	    j=qualifiedName2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, j.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(j.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, qualifiedNameList2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList2"

    public static class qualifiedName2_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName2"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:194:1: qualifiedName2 returns [String value] : i= Identifier ( '.' j= Identifier )* ;
    public final qualifiedName2_return qualifiedName2() throws RecognitionException {
        qualifiedName2_return retval = new qualifiedName2_return();
        retval.start = input.LT(1);
        int qualifiedName2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal54=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal54_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:195:2: (i= Identifier ( '.' j= Identifier )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:195:4: i= Identifier ( '.' j= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName21264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =i.getText();
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:195:41: ( '.' j= Identifier )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==26) ) {
                    int LA25_1 = input.LA(2);

                    if ( (LA25_1==Identifier) ) {
                        alt25=1;
                    }


                }


                switch (alt25) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:195:42: '.' j= Identifier
            	    {
            	    char_literal54=(Token)match(input,26,FOLLOW_26_in_qualifiedName21269); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal54_tree = (CommonTree)adaptor.create(char_literal54);
            	    adaptor.addChild(root_0, char_literal54_tree);
            	    }
            	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName21275); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    j_tree = (CommonTree)adaptor.create(j);
            	    adaptor.addChild(root_0, j_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =retval.value+'.'+j.getText();
            	    }

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, qualifiedName2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName2"

    public static class nameList_return extends ParserRuleReturnScope {
        public List<String> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameList"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:199:1: nameList returns [List<String> value] : (i= Identifier ( ',' j= Identifier )* )? ;
    public final nameList_return nameList() throws RecognitionException {
        nameList_return retval = new nameList_return();
        retval.start = input.LT(1);
        int nameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal55=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal55_tree=null;

        retval.value = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:201:2: ( (i= Identifier ( ',' j= Identifier )* )? )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:201:4: (i= Identifier ( ',' j= Identifier )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:201:4: (i= Identifier ( ',' j= Identifier )* )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==Identifier) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:201:5: i= Identifier ( ',' j= Identifier )*
                    {
                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_nameList1306); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i_tree = (CommonTree)adaptor.create(i);
                    adaptor.addChild(root_0, i_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.add(i.getText());
                    }
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:201:47: ( ',' j= Identifier )*
                    loop26:
                    do {
                        int alt26=2;
                        int LA26_0 = input.LA(1);

                        if ( (LA26_0==43) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                    	case 1 :
                    	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:201:48: ',' j= Identifier
                    	    {
                    	    char_literal55=(Token)match(input,43,FOLLOW_43_in_nameList1311); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal55_tree = (CommonTree)adaptor.create(char_literal55);
                    	    adaptor.addChild(root_0, char_literal55_tree);
                    	    }
                    	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_nameList1317); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    j_tree = (CommonTree)adaptor.create(j);
                    	    adaptor.addChild(root_0, j_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      retval.value.add(j.getText());
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop26;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, nameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nameList"

    public static class literal_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:204:1: literal returns [Expression value] : (l1= integerLiteral | l4= StringLiteral | l5= booleanLiteral );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token l4=null;
        integerLiteral_return l1 = null;

        booleanLiteral_return l5 = null;


        CommonTree l4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:205:5: (l1= integerLiteral | l4= StringLiteral | l5= booleanLiteral )
            int alt28=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt28=1;
                }
                break;
            case StringLiteral:
                {
                alt28=2;
                }
                break;
            case 56:
            case 57:
                {
                alt28=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }

            switch (alt28) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:205:9: l1= integerLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_integerLiteral_in_literal1348);
                    l1=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, l1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = l1.value;
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:208:9: l4= StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    l4=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal1366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    l4_tree = (CommonTree)adaptor.create(l4);
                    adaptor.addChild(root_0, l4_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringLiteral(pos(l4),context,l4.getText().substring(1,l4.getText().length()-1));
                    }

                    }
                    break;
                case 3 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:209:9: l5= booleanLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_literal1382);
                    l5=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, l5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = l5.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:213:1: integerLiteral returns [Expression value] : (hex= HexLiteral | oct= OctalLiteral | dec= DecimalLiteral );
    public final integerLiteral_return integerLiteral() throws RecognitionException {
        integerLiteral_return retval = new integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token hex=null;
        Token oct=null;
        Token dec=null;

        CommonTree hex_tree=null;
        CommonTree oct_tree=null;
        CommonTree dec_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:214:5: (hex= HexLiteral | oct= OctalLiteral | dec= DecimalLiteral )
            int alt29=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt29=1;
                }
                break;
            case OctalLiteral:
                {
                alt29=2;
                }
                break;
            case DecimalLiteral:
                {
                alt29=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:214:9: hex= HexLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    hex=(Token)match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral1412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    hex_tree = (CommonTree)adaptor.create(hex);
                    adaptor.addChild(root_0, hex_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(hex),context,Integer.parseInt(hex.getText().substring(2),16));
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:215:9: oct= OctalLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    oct=(Token)match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral1428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    oct_tree = (CommonTree)adaptor.create(oct);
                    adaptor.addChild(root_0, oct_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(oct),context,Integer.parseInt(oct.getText(),8));
                    }

                    }
                    break;
                case 3 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:216:9: dec= DecimalLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dec=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral1444); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    dec_tree = (CommonTree)adaptor.create(dec);
                    adaptor.addChild(root_0, dec_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(dec),context,Integer.parseInt(dec.getText()));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class floatingPointLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "floatingPointLiteral"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:219:1: floatingPointLiteral returns [Expression value] : l= FloatingPointLiteral ;
    public final floatingPointLiteral_return floatingPointLiteral() throws RecognitionException {
        floatingPointLiteral_return retval = new floatingPointLiteral_return();
        retval.start = input.LT(1);
        int floatingPointLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token l=null;

        CommonTree l_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:220:5: (l= FloatingPointLiteral )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:220:9: l= FloatingPointLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            l=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_floatingPointLiteral1473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            l_tree = (CommonTree)adaptor.create(l);
            adaptor.addChild(root_0, l_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new DoubleLiteral(pos(l),context,Double.parseDouble(l.getText()));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, floatingPointLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "floatingPointLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:223:1: booleanLiteral returns [Expression value] : (t= 'true' | f= 'false' );
    public final booleanLiteral_return booleanLiteral() throws RecognitionException {
        booleanLiteral_return retval = new booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t=null;
        Token f=null;

        CommonTree t_tree=null;
        CommonTree f_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:224:5: (t= 'true' | f= 'false' )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==56) ) {
                alt30=1;
            }
            else if ( (LA30_0==57) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:224:9: t= 'true'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t=(Token)match(input,56,FOLLOW_56_in_booleanLiteral1506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t_tree = (CommonTree)adaptor.create(t);
                    adaptor.addChild(root_0, t_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new BooleanLiteral(pos(t),context,true);
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:225:9: f= 'false'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    f=(Token)match(input,57,FOLLOW_57_in_booleanLiteral1522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    f_tree = (CommonTree)adaptor.create(f);
                    adaptor.addChild(root_0, f_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new BooleanLiteral(pos(f),context,false);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:229:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final elementValuePairs_return elementValuePairs() throws RecognitionException {
        elementValuePairs_return retval = new elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal57=null;
        elementValuePair_return elementValuePair56 = null;

        elementValuePair_return elementValuePair58 = null;


        CommonTree char_literal57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:230:5: ( elementValuePair ( ',' elementValuePair )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:230:9: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1544);
            elementValuePair56=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair56.getTree());
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:230:26: ( ',' elementValuePair )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==43) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:230:27: ',' elementValuePair
            	    {
            	    char_literal57=(Token)match(input,43,FOLLOW_43_in_elementValuePairs1547); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal57_tree = (CommonTree)adaptor.create(char_literal57);
            	    adaptor.addChild(root_0, char_literal57_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1549);
            	    elementValuePair58=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair58.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:233:1: elementValuePair : Identifier '=' elementValue ;
    public final elementValuePair_return elementValuePair() throws RecognitionException {
        elementValuePair_return retval = new elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        CommonTree root_0 = null;

        Token Identifier59=null;
        Token char_literal60=null;
        elementValue_return elementValue61 = null;


        CommonTree Identifier59_tree=null;
        CommonTree char_literal60_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:234:5: ( Identifier '=' elementValue )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:234:9: Identifier '=' elementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier59=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair1570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier59_tree = (CommonTree)adaptor.create(Identifier59);
            adaptor.addChild(root_0, Identifier59_tree);
            }
            char_literal60=(Token)match(input,34,FOLLOW_34_in_elementValuePair1572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal60_tree = (CommonTree)adaptor.create(char_literal60);
            adaptor.addChild(root_0, char_literal60_tree);
            }
            pushFollow(FOLLOW_elementValue_in_elementValuePair1574);
            elementValue61=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue61.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:237:1: elementValue : ( conditionalExpression | elementValueArrayInitializer );
    public final elementValue_return elementValue() throws RecognitionException {
        elementValue_return retval = new elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        conditionalExpression_return conditionalExpression62 = null;

        elementValueArrayInitializer_return elementValueArrayInitializer63 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:238:5: ( conditionalExpression | elementValueArrayInitializer )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( ((LA32_0>=Identifier && LA32_0<=DecimalLiteral)||LA32_0==37||(LA32_0>=56 && LA32_0<=57)||(LA32_0>=64 && LA32_0<=68)||LA32_0==75||(LA32_0>=78 && LA32_0<=81)) ) {
                alt32=1;
            }
            else if ( (LA32_0==41) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:238:9: conditionalExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue1597);
                    conditionalExpression62=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression62.getTree());

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:239:9: elementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue1607);
                    elementValueArrayInitializer63=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer63.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:242:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
    public final elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        elementValueArrayInitializer_return retval = new elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal64=null;
        Token char_literal66=null;
        Token char_literal68=null;
        Token char_literal69=null;
        elementValue_return elementValue65 = null;

        elementValue_return elementValue67 = null;


        CommonTree char_literal64_tree=null;
        CommonTree char_literal66_tree=null;
        CommonTree char_literal68_tree=null;
        CommonTree char_literal69_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:243:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:243:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal64=(Token)match(input,41,FOLLOW_41_in_elementValueArrayInitializer1630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal64_tree = (CommonTree)adaptor.create(char_literal64);
            adaptor.addChild(root_0, char_literal64_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:243:13: ( elementValue ( ',' elementValue )* )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( ((LA34_0>=Identifier && LA34_0<=DecimalLiteral)||LA34_0==37||LA34_0==41||(LA34_0>=56 && LA34_0<=57)||(LA34_0>=64 && LA34_0<=68)||LA34_0==75||(LA34_0>=78 && LA34_0<=81)) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:243:14: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1633);
                    elementValue65=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue65.getTree());
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:243:27: ( ',' elementValue )*
                    loop33:
                    do {
                        int alt33=2;
                        int LA33_0 = input.LA(1);

                        if ( (LA33_0==43) ) {
                            int LA33_1 = input.LA(2);

                            if ( ((LA33_1>=Identifier && LA33_1<=DecimalLiteral)||LA33_1==37||LA33_1==41||(LA33_1>=56 && LA33_1<=57)||(LA33_1>=64 && LA33_1<=68)||LA33_1==75||(LA33_1>=78 && LA33_1<=81)) ) {
                                alt33=1;
                            }


                        }


                        switch (alt33) {
                    	case 1 :
                    	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:243:28: ',' elementValue
                    	    {
                    	    char_literal66=(Token)match(input,43,FOLLOW_43_in_elementValueArrayInitializer1636); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal66_tree = (CommonTree)adaptor.create(char_literal66);
                    	    adaptor.addChild(root_0, char_literal66_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1638);
                    	    elementValue67=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue67.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop33;
                        }
                    } while (true);


                    }
                    break;

            }

            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:243:49: ( ',' )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==43) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:243:50: ','
                    {
                    char_literal68=(Token)match(input,43,FOLLOW_43_in_elementValueArrayInitializer1645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal68_tree = (CommonTree)adaptor.create(char_literal68);
                    adaptor.addChild(root_0, char_literal68_tree);
                    }

                    }
                    break;

            }

            char_literal69=(Token)match(input,42,FOLLOW_42_in_elementValueArrayInitializer1649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal69_tree = (CommonTree)adaptor.create(char_literal69);
            adaptor.addChild(root_0, char_literal69_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:248:1: parExpression returns [Expression value] : '(' expr= expression ')' ;
    public final parExpression_return parExpression() throws RecognitionException {
        parExpression_return retval = new parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal70=null;
        Token char_literal71=null;
        expression_return expr = null;


        CommonTree char_literal70_tree=null;
        CommonTree char_literal71_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:249:5: ( '(' expr= expression ')' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:249:9: '(' expr= expression ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal70=(Token)match(input,37,FOLLOW_37_in_parExpression1678); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal70_tree = (CommonTree)adaptor.create(char_literal70);
            adaptor.addChild(root_0, char_literal70_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression1684);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            char_literal71=(Token)match(input,38,FOLLOW_38_in_parExpression1686); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal71_tree = (CommonTree)adaptor.create(char_literal71);
            adaptor.addChild(root_0, char_literal71_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = expr.value;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class commaSeparatedExpressionList_return extends ParserRuleReturnScope {
        public List<Expression> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commaSeparatedExpressionList"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:252:1: commaSeparatedExpressionList returns [List<Expression> values] : e1= expression ( ',' e2= expression )* ;
    public final commaSeparatedExpressionList_return commaSeparatedExpressionList() throws RecognitionException {
        commaSeparatedExpressionList_return retval = new commaSeparatedExpressionList_return();
        retval.start = input.LT(1);
        int commaSeparatedExpressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal72=null;
        expression_return e1 = null;

        expression_return e2 = null;


        CommonTree char_literal72_tree=null;

        retval.values = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:254:5: (e1= expression ( ',' e2= expression )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:254:9: e1= expression ( ',' e2= expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_commaSeparatedExpressionList1724);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(e1.value);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:254:50: ( ',' e2= expression )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==43) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:254:51: ',' e2= expression
            	    {
            	    char_literal72=(Token)match(input,43,FOLLOW_43_in_commaSeparatedExpressionList1729); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal72_tree = (CommonTree)adaptor.create(char_literal72);
            	    adaptor.addChild(root_0, char_literal72_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_commaSeparatedExpressionList1735);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(e2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, commaSeparatedExpressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commaSeparatedExpressionList"

    public static class andSeparatedExpressionList_return extends ParserRuleReturnScope {
        public List<Expression> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andSeparatedExpressionList"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:257:1: andSeparatedExpressionList returns [List<Expression> values] : e1= expression ( '&' e2= expression )* ;
    public final andSeparatedExpressionList_return andSeparatedExpressionList() throws RecognitionException {
        andSeparatedExpressionList_return retval = new andSeparatedExpressionList_return();
        retval.start = input.LT(1);
        int andSeparatedExpressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal73=null;
        expression_return e1 = null;

        expression_return e2 = null;


        CommonTree char_literal73_tree=null;

        retval.values = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:259:5: (e1= expression ( '&' e2= expression )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:259:9: e1= expression ( '&' e2= expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_andSeparatedExpressionList1772);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(e1.value);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:259:50: ( '&' e2= expression )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==58) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:259:51: '&' e2= expression
            	    {
            	    char_literal73=(Token)match(input,58,FOLLOW_58_in_andSeparatedExpressionList1777); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal73_tree = (CommonTree)adaptor.create(char_literal73);
            	    adaptor.addChild(root_0, char_literal73_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_andSeparatedExpressionList1783);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(e2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, andSeparatedExpressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andSeparatedExpressionList"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:262:1: conditionalExpression returns [Expression value] : r1= disjunction ( '?' r2= expression ':' r3= expression )? ;
    public final conditionalExpression_return conditionalExpression() throws RecognitionException {
        conditionalExpression_return retval = new conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal74=null;
        Token char_literal75=null;
        disjunction_return r1 = null;

        expression_return r2 = null;

        expression_return r3 = null;


        CommonTree char_literal74_tree=null;
        CommonTree char_literal75_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:263:5: (r1= disjunction ( '?' r2= expression ':' r3= expression )? )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:263:9: r1= disjunction ( '?' r2= expression ':' r3= expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_disjunction_in_conditionalExpression1815);
            r1=disjunction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:263:26: ( '?' r2= expression ':' r3= expression )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==59) ) {
                int LA38_1 = input.LA(2);

                if ( (synpred54_Mandarax()) ) {
                    alt38=1;
                }
            }
            switch (alt38) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:263:28: '?' r2= expression ':' r3= expression
                    {
                    char_literal74=(Token)match(input,59,FOLLOW_59_in_conditionalExpression1819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal74_tree = (CommonTree)adaptor.create(char_literal74);
                    adaptor.addChild(root_0, char_literal74_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression1825);
                    r2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    char_literal75=(Token)match(input,30,FOLLOW_30_in_conditionalExpression1827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal75_tree = (CommonTree)adaptor.create(char_literal75);
                    adaptor.addChild(root_0, char_literal75_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression1833);
                    r3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              retval.value =(r2==null)?r1.value:new ConditionalExpression(pos(r1.value),context,r1.value,r2.value,r3.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class disjunction_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "disjunction"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:266:1: disjunction returns [Expression value] : part1= conjunction ( '|' part= conjunction )* ;
    public final disjunction_return disjunction() throws RecognitionException {
        disjunction_return retval = new disjunction_return();
        retval.start = input.LT(1);
        int disjunction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal76=null;
        conjunction_return part1 = null;

        conjunction_return part = null;


        CommonTree char_literal76_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:267:5: (part1= conjunction ( '|' part= conjunction )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:267:9: part1= conjunction ( '|' part= conjunction )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conjunction_in_disjunction1866);
            part1=conjunction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:267:53: ( '|' part= conjunction )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==60) ) {
                    int LA39_2 = input.LA(2);

                    if ( (synpred55_Mandarax()) ) {
                        alt39=1;
                    }


                }


                switch (alt39) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:267:55: '|' part= conjunction
            	    {
            	    char_literal76=(Token)match(input,60,FOLLOW_60_in_disjunction1872); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal76_tree = (CommonTree)adaptor.create(char_literal76);
            	    adaptor.addChild(root_0, char_literal76_tree);
            	    }
            	    pushFollow(FOLLOW_conjunction_in_disjunction1878);
            	    part=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,BinOp.OR,retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, disjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "disjunction"

    public static class conjunction_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:270:1: conjunction returns [Expression value] : part1= equalityExpression ( '&' part= equalityExpression )* ;
    public final conjunction_return conjunction() throws RecognitionException {
        conjunction_return retval = new conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal77=null;
        equalityExpression_return part1 = null;

        equalityExpression_return part = null;


        CommonTree char_literal77_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:271:5: (part1= equalityExpression ( '&' part= equalityExpression )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:271:9: part1= equalityExpression ( '&' part= equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_conjunction1910);
            part1=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:271:60: ( '&' part= equalityExpression )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==58) ) {
                    int LA40_2 = input.LA(2);

                    if ( (synpred56_Mandarax()) ) {
                        alt40=1;
                    }


                }


                switch (alt40) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:271:62: '&' part= equalityExpression
            	    {
            	    char_literal77=(Token)match(input,58,FOLLOW_58_in_conjunction1916); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal77_tree = (CommonTree)adaptor.create(char_literal77);
            	    adaptor.addChild(root_0, char_literal77_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_conjunction1923);
            	    part=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,BinOp.AND,retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:274:1: equalityExpression returns [Expression value] : part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )* ;
    public final equalityExpression_return equalityExpression() throws RecognitionException {
        equalityExpression_return retval = new equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        instanceOfExpression_return part1 = null;

        instanceOfExpression_return part2 = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:275:5: (part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:275:9: part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1955);
            part1=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value =part1.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:275:60: (op= ( '==' | '!=' ) part2= instanceOfExpression )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( ((LA41_0>=61 && LA41_0<=62)) ) {
                    int LA41_2 = input.LA(2);

                    if ( (synpred58_Mandarax()) ) {
                        alt41=1;
                    }


                }


                switch (alt41) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:275:62: op= ( '==' | '!=' ) part2= instanceOfExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=61 && input.LA(1)<=62) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1977);
            	    part2=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value =new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:278:1: instanceOfExpression returns [Expression value] : part= relationalExpression ( 'instanceof' t= type )? ;
    public final instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        instanceOfExpression_return retval = new instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal78=null;
        relationalExpression_return part = null;

        type_return t = null;


        CommonTree string_literal78_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:279:5: (part= relationalExpression ( 'instanceof' t= type )? )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:279:9: part= relationalExpression ( 'instanceof' t= type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression2009);
            part=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:279:37: ( 'instanceof' t= type )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==63) ) {
                int LA42_1 = input.LA(2);

                if ( (synpred59_Mandarax()) ) {
                    alt42=1;
                }
            }
            switch (alt42) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:279:38: 'instanceof' t= type
                    {
                    string_literal78=(Token)match(input,63,FOLLOW_63_in_instanceOfExpression2012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal78_tree = (CommonTree)adaptor.create(string_literal78);
                    adaptor.addChild(root_0, string_literal78_tree);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression2018);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              retval.value = (t==null)?part.value:new InstanceOfExpression(pos(part.value),context,part.value,t.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class aggregation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregation"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:282:1: aggregation returns [Expression value] : f= ( 'avg' | 'sum' | 'min' | 'max' | 'count' ) v= Identifier 'in' rel= relationalExpression ;
    public final aggregation_return aggregation() throws RecognitionException {
        aggregation_return retval = new aggregation_return();
        retval.start = input.LT(1);
        int aggregation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token f=null;
        Token v=null;
        Token string_literal79=null;
        relationalExpression_return rel = null;


        CommonTree f_tree=null;
        CommonTree v_tree=null;
        CommonTree string_literal79_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:283:4: (f= ( 'avg' | 'sum' | 'min' | 'max' | 'count' ) v= Identifier 'in' rel= relationalExpression )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:283:8: f= ( 'avg' | 'sum' | 'min' | 'max' | 'count' ) v= Identifier 'in' rel= relationalExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            f=(Token)input.LT(1);
            if ( (input.LA(1)>=64 && input.LA(1)<=68) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(f));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            v=(Token)match(input,Identifier,FOLLOW_Identifier_in_aggregation2081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            v_tree = (CommonTree)adaptor.create(v);
            adaptor.addChild(root_0, v_tree);
            }
            string_literal79=(Token)match(input,69,FOLLOW_69_in_aggregation2083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal79_tree = (CommonTree)adaptor.create(string_literal79);
            adaptor.addChild(root_0, string_literal79_tree);
            }
            pushFollow(FOLLOW_relationalExpression_in_aggregation2087);
            rel=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new Aggregation(pos(f),context,f.getText(),v.getText(),(FunctionInvocation)rel.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, aggregation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "aggregation"

    public static class indomain_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indomain"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:286:1: indomain returns [Expression value] : i= objectref 'in' x= expression ;
    public final indomain_return indomain() throws RecognitionException {
        indomain_return retval = new indomain_return();
        retval.start = input.LT(1);
        int indomain_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal80=null;
        objectref_return i = null;

        expression_return x = null;


        CommonTree string_literal80_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:287:5: (i= objectref 'in' x= expression )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:287:10: i= objectref 'in' x= expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_indomain2126);
            i=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
            if ( state.backtracking==0 ) {
              retval.value = i.value;
            }
            string_literal80=(Token)match(input,69,FOLLOW_69_in_indomain2130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal80_tree = (CommonTree)adaptor.create(string_literal80);
            adaptor.addChild(root_0, string_literal80_tree);
            }
            pushFollow(FOLLOW_expression_in_indomain2136);
            x=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, x.getTree());
            if ( state.backtracking==0 ) {
              retval.value = FunctionInvocation.createInBuildIn(pos(i.value),context,retval.value,x.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, indomain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "indomain"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:290:1: relationalExpression returns [Expression value] : part1= shiftExpression (op= relationalOp part2= shiftExpression )* ;
    public final relationalExpression_return relationalExpression() throws RecognitionException {
        relationalExpression_return retval = new relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        shiftExpression_return part1 = null;

        relationalOp_return op = null;

        shiftExpression_return part2 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:291:5: (part1= shiftExpression (op= relationalOp part2= shiftExpression )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:291:9: part1= shiftExpression (op= relationalOp part2= shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression2171);
            part1=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value =part1.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:291:55: (op= relationalOp part2= shiftExpression )*
            loop43:
            do {
                int alt43=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA43_2 = input.LA(2);

                    if ( (synpred64_Mandarax()) ) {
                        alt43=1;
                    }


                    }
                    break;
                case 73:
                    {
                    int LA43_3 = input.LA(2);

                    if ( (synpred64_Mandarax()) ) {
                        alt43=1;
                    }


                    }
                    break;
                case 70:
                    {
                    int LA43_4 = input.LA(2);

                    if ( (synpred64_Mandarax()) ) {
                        alt43=1;
                    }


                    }
                    break;
                case 71:
                    {
                    int LA43_5 = input.LA(2);

                    if ( (synpred64_Mandarax()) ) {
                        alt43=1;
                    }


                    }
                    break;

                }

                switch (alt43) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:291:57: op= relationalOp part2= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression2181);
            	    op=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression2187);
            	    part2=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,op.value,retval.value,part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        public BinOp value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:295:1: relationalOp returns [BinOp value] : ( '<=' | '>=' | '<' | '>' );
    public final relationalOp_return relationalOp() throws RecognitionException {
        relationalOp_return retval = new relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal81=null;
        Token string_literal82=null;
        Token char_literal83=null;
        Token char_literal84=null;

        CommonTree string_literal81_tree=null;
        CommonTree string_literal82_tree=null;
        CommonTree char_literal83_tree=null;
        CommonTree char_literal84_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:296:5: ( '<=' | '>=' | '<' | '>' )
            int alt44=4;
            switch ( input.LA(1) ) {
            case 70:
                {
                alt44=1;
                }
                break;
            case 71:
                {
                alt44=2;
                }
                break;
            case 72:
                {
                alt44=3;
                }
                break;
            case 73:
                {
                alt44=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:296:9: '<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal81=(Token)match(input,70,FOLLOW_70_in_relationalOp2221); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal81_tree = (CommonTree)adaptor.create(string_literal81);
                    adaptor.addChild(root_0, string_literal81_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.LTE;
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:297:9: '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal82=(Token)match(input,71,FOLLOW_71_in_relationalOp2233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal82_tree = (CommonTree)adaptor.create(string_literal82);
                    adaptor.addChild(root_0, string_literal82_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.GTE;
                    }

                    }
                    break;
                case 3 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:298:7: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal83=(Token)match(input,72,FOLLOW_72_in_relationalOp2243); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal83_tree = (CommonTree)adaptor.create(char_literal83);
                    adaptor.addChild(root_0, char_literal83_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.LT;
                    }

                    }
                    break;
                case 4 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:299:9: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal84=(Token)match(input,73,FOLLOW_73_in_relationalOp2255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal84_tree = (CommonTree)adaptor.create(char_literal84);
                    adaptor.addChild(root_0, char_literal84_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.GT;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:303:1: shiftExpression returns [Expression value] : part1= additiveExpression (op= shiftOp part= additiveExpression )? ;
    public final shiftExpression_return shiftExpression() throws RecognitionException {
        shiftExpression_return retval = new shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        additiveExpression_return part1 = null;

        shiftOp_return op = null;

        additiveExpression_return part = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:304:5: (part1= additiveExpression (op= shiftOp part= additiveExpression )? )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:304:9: part1= additiveExpression (op= shiftOp part= additiveExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression2285);
            part1=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:304:60: (op= shiftOp part= additiveExpression )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==72) ) {
                int LA45_1 = input.LA(2);

                if ( (synpred68_Mandarax()) ) {
                    alt45=1;
                }
            }
            else if ( (LA45_0==73) ) {
                int LA45_2 = input.LA(2);

                if ( (synpred68_Mandarax()) ) {
                    alt45=1;
                }
            }
            switch (alt45) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:304:62: op= shiftOp part= additiveExpression
                    {
                    pushFollow(FOLLOW_shiftOp_in_shiftExpression2295);
                    op=shiftOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
                    pushFollow(FOLLOW_additiveExpression_in_shiftExpression2301);
                    part=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new BinaryExpression(pos(part1.value),context,op.value,retval.value,part.value);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        public BinOp value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:307:1: shiftOp returns [BinOp value] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final shiftOp_return shiftOp() throws RecognitionException {
        shiftOp_return retval = new shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;

        CommonTree t1_tree=null;
        CommonTree t2_tree=null;
        CommonTree t3_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:308:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt46=3;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:308:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,72,FOLLOW_72_in_shiftOp2338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,72,FOLLOW_72_in_shiftOp2342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_LL;
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:311:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,73,FOLLOW_73_in_shiftOp2376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,73,FOLLOW_73_in_shiftOp2380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,73,FOLLOW_73_in_shiftOp2384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (CommonTree)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() && \n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_RRR;
                    }

                    }
                    break;
                case 3 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:316:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,73,FOLLOW_73_in_shiftOp2416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,73,FOLLOW_73_in_shiftOp2420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_RR;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:322:1: additiveExpression returns [Expression value] : part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )* ;
    public final additiveExpression_return additiveExpression() throws RecognitionException {
        additiveExpression_return retval = new additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        multiplicativeExpression_return part1 = null;

        multiplicativeExpression_return part = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:323:5: (part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:323:8: part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression2459);
            part1=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:323:64: (op= ( '+' | '-' ) part= multiplicativeExpression )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( ((LA47_0>=74 && LA47_0<=75)) ) {
                    int LA47_2 = input.LA(2);

                    if ( (synpred73_Mandarax()) ) {
                        alt47=1;
                    }


                }


                switch (alt47) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:323:66: op= ( '+' | '-' ) part= multiplicativeExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=74 && input.LA(1)<=75) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression2480);
            	    part=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:326:1: multiplicativeExpression returns [Expression value] : part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )* ;
    public final multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        multiplicativeExpression_return retval = new multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        unaryExpression_return part1 = null;

        unaryExpression_return part = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:327:5: (part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:327:8: part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression2511);
            part1=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:327:56: (op= ( '*' | '/' | '%' ) part= unaryExpression )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==27||(LA48_0>=76 && LA48_0<=77)) ) {
                    int LA48_2 = input.LA(2);

                    if ( (synpred76_Mandarax()) ) {
                        alt48=1;
                    }


                }


                switch (alt48) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:327:58: op= ( '*' | '/' | '%' ) part= unaryExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( input.LA(1)==27||(input.LA(1)>=76 && input.LA(1)<=77) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression2538);
            	    part=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:330:1: unaryExpression returns [Expression value] : ( '-' part1= unaryExpression | part2= unaryExpressionNotPlusMinus );
    public final unaryExpression_return unaryExpression() throws RecognitionException {
        unaryExpression_return retval = new unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal85=null;
        unaryExpression_return part1 = null;

        unaryExpressionNotPlusMinus_return part2 = null;


        CommonTree char_literal85_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:331:5: ( '-' part1= unaryExpression | part2= unaryExpressionNotPlusMinus )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==75) ) {
                alt49=1;
            }
            else if ( ((LA49_0>=Identifier && LA49_0<=DecimalLiteral)||LA49_0==37||(LA49_0>=56 && LA49_0<=57)||(LA49_0>=64 && LA49_0<=68)||(LA49_0>=78 && LA49_0<=81)) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:331:9: '-' part1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal85=(Token)match(input,75,FOLLOW_75_in_unaryExpression2570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal85_tree = (CommonTree)adaptor.create(char_literal85);
                    adaptor.addChild(root_0, char_literal85_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression2576);
                    part1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(part1.value),context,UnOp.MINUS,part1.value);
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:332:9: part2= unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression2592);
                    part2=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = part2.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:335:1: unaryExpressionNotPlusMinus returns [Expression value] : ( '~' r1= unaryExpression | '!' r2= unaryExpression | r12= indomain | r13= aggregation | r3= castExpression | r11= constructorInvocation | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression | r10= nullValue );
    public final unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        unaryExpressionNotPlusMinus_return retval = new unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal86=null;
        Token char_literal87=null;
        unaryExpression_return r1 = null;

        unaryExpression_return r2 = null;

        indomain_return r12 = null;

        aggregation_return r13 = null;

        castExpression_return r3 = null;

        constructorInvocation_return r11 = null;

        functionInvocation_return r9 = null;

        methodInvocation_return r8 = null;

        propertyAccess_return r7 = null;

        objectref_return r4 = null;

        qualifiedName_return r5 = null;

        parExpression_return r6 = null;

        nullValue_return r10 = null;


        CommonTree char_literal86_tree=null;
        CommonTree char_literal87_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:336:5: ( '~' r1= unaryExpression | '!' r2= unaryExpression | r12= indomain | r13= aggregation | r3= castExpression | r11= constructorInvocation | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression | r10= nullValue )
            int alt50=13;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:336:7: '~' r1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal86=(Token)match(input,78,FOLLOW_78_in_unaryExpressionNotPlusMinus2615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal86_tree = (CommonTree)adaptor.create(char_literal86);
                    adaptor.addChild(root_0, char_literal86_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2621);
                    r1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(r1.value),context,UnOp.COMPL,r1.value);
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:337:9: '!' r2= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal87=(Token)match(input,79,FOLLOW_79_in_unaryExpressionNotPlusMinus2633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal87_tree = (CommonTree)adaptor.create(char_literal87);
                    adaptor.addChild(root_0, char_literal87_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2639);
                    r2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(r2.value),context,UnOp.NOT,r2.value);
                    }

                    }
                    break;
                case 3 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:338:9: r12= indomain
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_indomain_in_unaryExpressionNotPlusMinus2655);
                    r12=indomain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r12.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r12.value;
                    }

                    }
                    break;
                case 4 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:339:9: r13= aggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_aggregation_in_unaryExpressionNotPlusMinus2670);
                    r13=aggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r13.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r13.value;
                    }

                    }
                    break;
                case 5 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:340:9: r3= castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus2685);
                    r3=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r3.value;
                    }

                    }
                    break;
                case 6 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:341:9: r11= constructorInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constructorInvocation_in_unaryExpressionNotPlusMinus2701);
                    r11=constructorInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r11.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r11.value;
                    }

                    }
                    break;
                case 7 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:342:9: r9= functionInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_functionInvocation_in_unaryExpressionNotPlusMinus2717);
                    r9=functionInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r9.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r9.value;
                    }

                    }
                    break;
                case 8 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:343:9: r8= methodInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_methodInvocation_in_unaryExpressionNotPlusMinus2733);
                    r8=methodInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r8.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r8.value;
                    }

                    }
                    break;
                case 9 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:344:9: r7= propertyAccess
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyAccess_in_unaryExpressionNotPlusMinus2749);
                    r7=propertyAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r7.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r7.value;
                    }

                    }
                    break;
                case 10 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:345:9: r4= objectref
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectref_in_unaryExpressionNotPlusMinus2765);
                    r4=objectref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r4.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r4.value;
                    }

                    }
                    break;
                case 11 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:346:9: r5= qualifiedName
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedName_in_unaryExpressionNotPlusMinus2781);
                    r5=qualifiedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r5.value;
                    }

                    }
                    break;
                case 12 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:347:9: r6= parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_unaryExpressionNotPlusMinus2797);
                    r6=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r6.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r6.value;
                    }

                    }
                    break;
                case 13 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:348:9: r10= nullValue
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_nullValue_in_unaryExpressionNotPlusMinus2813);
                    r10=nullValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r10.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r10.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class nullValue_return extends ParserRuleReturnScope {
        public NullValue value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nullValue"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:351:1: nullValue returns [NullValue value] : n= 'null' ;
    public final nullValue_return nullValue() throws RecognitionException {
        nullValue_return retval = new nullValue_return();
        retval.start = input.LT(1);
        int nullValue_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;

        CommonTree n_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:352:5: (n= 'null' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:352:8: n= 'null'
            {
            root_0 = (CommonTree)adaptor.nil();

            n=(Token)match(input,80,FOLLOW_80_in_nullValue2842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new NullValue(pos(n),context);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, nullValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nullValue"

    public static class propertyAccess_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyAccess"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:355:1: propertyAccess returns [Expression value] : o= objectref ( '.' i= Identifier )* ;
    public final propertyAccess_return propertyAccess() throws RecognitionException {
        propertyAccess_return retval = new propertyAccess_return();
        retval.start = input.LT(1);
        int propertyAccess_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal88=null;
        objectref_return o = null;


        CommonTree i_tree=null;
        CommonTree char_literal88_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:356:5: (o= objectref ( '.' i= Identifier )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:356:9: o= objectref ( '.' i= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_propertyAccess2878);
            o=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, o.getTree());
            if ( state.backtracking==0 ) {
              retval.value = o.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:356:43: ( '.' i= Identifier )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==26) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:356:44: '.' i= Identifier
            	    {
            	    char_literal88=(Token)match(input,26,FOLLOW_26_in_propertyAccess2883); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal88_tree = (CommonTree)adaptor.create(char_literal88);
            	    adaptor.addChild(root_0, char_literal88_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_propertyAccess2888); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value = new MemberAccess(pos(o.value),context,retval.value,i.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, propertyAccess_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyAccess"

    public static class methodInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodInvocation"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:359:1: methodInvocation returns [Expression value] : o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )* ;
    public final methodInvocation_return methodInvocation() throws RecognitionException {
        methodInvocation_return retval = new methodInvocation_return();
        retval.start = input.LT(1);
        int methodInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal89=null;
        Token char_literal90=null;
        Token char_literal91=null;
        objectref_return o = null;

        commaSeparatedExpressionList_return p = null;


        CommonTree i_tree=null;
        CommonTree char_literal89_tree=null;
        CommonTree char_literal90_tree=null;
        CommonTree char_literal91_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:360:5: (o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )* )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:360:9: o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_methodInvocation2921);
            o=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, o.getTree());
            if ( state.backtracking==0 ) {
              retval.value = o.value;
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:360:43: ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==26) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:360:44: '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')'
            	    {
            	    char_literal89=(Token)match(input,26,FOLLOW_26_in_methodInvocation2926); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal89_tree = (CommonTree)adaptor.create(char_literal89);
            	    adaptor.addChild(root_0, char_literal89_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodInvocation2932); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    char_literal90=(Token)match(input,37,FOLLOW_37_in_methodInvocation2934); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal90_tree = (CommonTree)adaptor.create(char_literal90);
            	    adaptor.addChild(root_0, char_literal90_tree);
            	    }
            	    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:360:66: (p= commaSeparatedExpressionList )?
            	    int alt52=2;
            	    int LA52_0 = input.LA(1);

            	    if ( ((LA52_0>=Identifier && LA52_0<=DecimalLiteral)||LA52_0==37||(LA52_0>=56 && LA52_0<=57)||(LA52_0>=64 && LA52_0<=68)||LA52_0==75||(LA52_0>=78 && LA52_0<=81)) ) {
            	        alt52=1;
            	    }
            	    switch (alt52) {
            	        case 1 :
            	            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:360:67: p= commaSeparatedExpressionList
            	            {
            	            pushFollow(FOLLOW_commaSeparatedExpressionList_in_methodInvocation2940);
            	            p=commaSeparatedExpressionList();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

            	            }
            	            break;

            	    }

            	    char_literal91=(Token)match(input,38,FOLLOW_38_in_methodInvocation2944); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal91_tree = (CommonTree)adaptor.create(char_literal91);
            	    adaptor.addChild(root_0, char_literal91_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value = new MemberAccess(pos(o.value),context,retval.value,i.getText(),p==null?new ArrayList<Expression>():p.values);
            	    }

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, methodInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodInvocation"

    public static class functionInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionInvocation"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:363:1: functionInvocation returns [Expression value] : f= Identifier '(' (p= commaSeparatedExpressionList )? ')' ;
    public final functionInvocation_return functionInvocation() throws RecognitionException {
        functionInvocation_return retval = new functionInvocation_return();
        retval.start = input.LT(1);
        int functionInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token f=null;
        Token char_literal92=null;
        Token char_literal93=null;
        commaSeparatedExpressionList_return p = null;


        CommonTree f_tree=null;
        CommonTree char_literal92_tree=null;
        CommonTree char_literal93_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:364:5: (f= Identifier '(' (p= commaSeparatedExpressionList )? ')' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:364:9: f= Identifier '(' (p= commaSeparatedExpressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            f=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionInvocation2981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            f_tree = (CommonTree)adaptor.create(f);
            adaptor.addChild(root_0, f_tree);
            }
            char_literal92=(Token)match(input,37,FOLLOW_37_in_functionInvocation2984); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal92_tree = (CommonTree)adaptor.create(char_literal92);
            adaptor.addChild(root_0, char_literal92_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:364:29: (p= commaSeparatedExpressionList )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=Identifier && LA54_0<=DecimalLiteral)||LA54_0==37||(LA54_0>=56 && LA54_0<=57)||(LA54_0>=64 && LA54_0<=68)||LA54_0==75||(LA54_0>=78 && LA54_0<=81)) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:364:30: p= commaSeparatedExpressionList
                    {
                    pushFollow(FOLLOW_commaSeparatedExpressionList_in_functionInvocation2991);
                    p=commaSeparatedExpressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

                    }
                    break;

            }

            char_literal93=(Token)match(input,38,FOLLOW_38_in_functionInvocation2995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal93_tree = (CommonTree)adaptor.create(char_literal93);
            adaptor.addChild(root_0, char_literal93_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new FunctionInvocation(pos(f),context,f.getText(),p==null?new ArrayList<Expression>():p.values);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, functionInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionInvocation"

    public static class constructorInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorInvocation"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:368:1: constructorInvocation returns [Expression value] : n= 'new' f= qualifiedName2 '(' (p= commaSeparatedExpressionList )? ')' ;
    public final constructorInvocation_return constructorInvocation() throws RecognitionException {
        constructorInvocation_return retval = new constructorInvocation_return();
        retval.start = input.LT(1);
        int constructorInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        Token char_literal94=null;
        Token char_literal95=null;
        qualifiedName2_return f = null;

        commaSeparatedExpressionList_return p = null;


        CommonTree n_tree=null;
        CommonTree char_literal94_tree=null;
        CommonTree char_literal95_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:369:5: (n= 'new' f= qualifiedName2 '(' (p= commaSeparatedExpressionList )? ')' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:369:9: n= 'new' f= qualifiedName2 '(' (p= commaSeparatedExpressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            n=(Token)match(input,81,FOLLOW_81_in_constructorInvocation3045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            pushFollow(FOLLOW_qualifiedName2_in_constructorInvocation3051);
            f=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, f.getTree());
            char_literal94=(Token)match(input,37,FOLLOW_37_in_constructorInvocation3054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal94_tree = (CommonTree)adaptor.create(char_literal94);
            adaptor.addChild(root_0, char_literal94_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:369:43: (p= commaSeparatedExpressionList )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( ((LA55_0>=Identifier && LA55_0<=DecimalLiteral)||LA55_0==37||(LA55_0>=56 && LA55_0<=57)||(LA55_0>=64 && LA55_0<=68)||LA55_0==75||(LA55_0>=78 && LA55_0<=81)) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:369:44: p= commaSeparatedExpressionList
                    {
                    pushFollow(FOLLOW_commaSeparatedExpressionList_in_constructorInvocation3061);
                    p=commaSeparatedExpressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

                    }
                    break;

            }

            char_literal95=(Token)match(input,38,FOLLOW_38_in_constructorInvocation3065); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal95_tree = (CommonTree)adaptor.create(char_literal95);
            adaptor.addChild(root_0, char_literal95_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new ConstructorInvocation(pos(n),context,f.value,p==null?new ArrayList<Expression>():p.values);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, constructorInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorInvocation"

    public static class objectref_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectref"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:372:1: objectref returns [Expression value] : (r1= Identifier | r2= literal | r3= parExpression );
    public final objectref_return objectref() throws RecognitionException {
        objectref_return retval = new objectref_return();
        retval.start = input.LT(1);
        int objectref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token r1=null;
        literal_return r2 = null;

        parExpression_return r3 = null;


        CommonTree r1_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:373:6: (r1= Identifier | r2= literal | r3= parExpression )
            int alt56=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                alt56=1;
                }
                break;
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 56:
            case 57:
                {
                alt56=2;
                }
                break;
            case 37:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:373:8: r1= Identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    r1=(Token)match(input,Identifier,FOLLOW_Identifier_in_objectref3102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    r1_tree = (CommonTree)adaptor.create(r1);
                    adaptor.addChild(root_0, r1_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new Variable(pos(r1),context,r1.getText());
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:374:8: r2= literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_objectref3117);
                    r2=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r2.value;
                    }

                    }
                    break;
                case 3 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:375:8: r3= parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_objectref3132);
                    r3=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r3.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, objectref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectref"

    public static class castExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:378:1: castExpression returns [Expression value] : ( '(' t1= primitiveType ')' exp1= unaryExpression | '(' t2= type ')' exp2= unaryExpressionNotPlusMinus );
    public final castExpression_return castExpression() throws RecognitionException {
        castExpression_return retval = new castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal96=null;
        Token char_literal97=null;
        Token char_literal98=null;
        Token char_literal99=null;
        primitiveType_return t1 = null;

        unaryExpression_return exp1 = null;

        type_return t2 = null;

        unaryExpressionNotPlusMinus_return exp2 = null;


        CommonTree char_literal96_tree=null;
        CommonTree char_literal97_tree=null;
        CommonTree char_literal98_tree=null;
        CommonTree char_literal99_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:379:5: ( '(' t1= primitiveType ')' exp1= unaryExpression | '(' t2= type ')' exp2= unaryExpressionNotPlusMinus )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==37) ) {
                int LA57_1 = input.LA(2);

                if ( (synpred97_Mandarax()) ) {
                    alt57=1;
                }
                else if ( (true) ) {
                    alt57=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:379:8: '(' t1= primitiveType ')' exp1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal96=(Token)match(input,37,FOLLOW_37_in_castExpression3165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal96_tree = (CommonTree)adaptor.create(char_literal96);
                    adaptor.addChild(root_0, char_literal96_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression3171);
                    t1=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
                    char_literal97=(Token)match(input,38,FOLLOW_38_in_castExpression3173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal97_tree = (CommonTree)adaptor.create(char_literal97);
                    adaptor.addChild(root_0, char_literal97_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression3179);
                    exp1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new CastExpression(pos(t1.start),context,exp1.value,t1.value);
                    }

                    }
                    break;
                case 2 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:380:8: '(' t2= type ')' exp2= unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal98=(Token)match(input,37,FOLLOW_37_in_castExpression3190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal98_tree = (CommonTree)adaptor.create(char_literal98);
                    adaptor.addChild(root_0, char_literal98_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression3196);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());
                    char_literal99=(Token)match(input,38,FOLLOW_38_in_castExpression3198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal99_tree = (CommonTree)adaptor.create(char_literal99);
                    adaptor.addChild(root_0, char_literal99_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression3204);
                    exp2=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new CastExpression(pos(t2.start),context,exp2.value,t2.value);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:383:1: arguments : '(' ( commaSeparatedExpressionList )? ')' ;
    public final arguments_return arguments() throws RecognitionException {
        arguments_return retval = new arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal100=null;
        Token char_literal102=null;
        commaSeparatedExpressionList_return commaSeparatedExpressionList101 = null;


        CommonTree char_literal100_tree=null;
        CommonTree char_literal102_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:384:5: ( '(' ( commaSeparatedExpressionList )? ')' )
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:384:9: '(' ( commaSeparatedExpressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal100=(Token)match(input,37,FOLLOW_37_in_arguments3226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal100_tree = (CommonTree)adaptor.create(char_literal100);
            adaptor.addChild(root_0, char_literal100_tree);
            }
            // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:384:13: ( commaSeparatedExpressionList )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( ((LA58_0>=Identifier && LA58_0<=DecimalLiteral)||LA58_0==37||(LA58_0>=56 && LA58_0<=57)||(LA58_0>=64 && LA58_0<=68)||LA58_0==75||(LA58_0>=78 && LA58_0<=81)) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:0:0: commaSeparatedExpressionList
                    {
                    pushFollow(FOLLOW_commaSeparatedExpressionList_in_arguments3228);
                    commaSeparatedExpressionList101=commaSeparatedExpressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commaSeparatedExpressionList101.getTree());

                    }
                    break;

            }

            char_literal102=(Token)match(input,38,FOLLOW_38_in_arguments3231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal102_tree = (CommonTree)adaptor.create(char_literal102);
            adaptor.addChild(root_0, char_literal102_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred2_Mandarax
    public final void synpred2_Mandarax_fragment() throws RecognitionException {   
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:77:48: ( NEWLINE )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:77:48: NEWLINE
        {
        match(input,NEWLINE,FOLLOW_NEWLINE_in_synpred2_Mandarax83); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Mandarax

    // $ANTLR start synpred4_Mandarax
    public final void synpred4_Mandarax_fragment() throws RecognitionException {   
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:6: ( NEWLINE )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:6: NEWLINE
        {
        match(input,NEWLINE,FOLLOW_NEWLINE_in_synpred4_Mandarax97); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_Mandarax

    // $ANTLR start synpred6_Mandarax
    public final void synpred6_Mandarax_fragment() throws RecognitionException {   
        relationshipDefinition_return rel = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:69: ( (rel= relationshipDefinition ) )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:69: (rel= relationshipDefinition )
        {
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:69: (rel= relationshipDefinition )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:78:70: rel= relationshipDefinition
        {
        pushFollow(FOLLOW_relationshipDefinition_in_synpred6_Mandarax118);
        rel=relationshipDefinition();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred6_Mandarax

    // $ANTLR start synpred9_Mandarax
    public final void synpred9_Mandarax_fragment() throws RecognitionException {   
        annotationList_return a = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:91:10: (a= annotationList )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:91:10: a= annotationList
        {
        pushFollow(FOLLOW_annotationList_in_synpred9_Mandarax258);
        a=annotationList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Mandarax

    // $ANTLR start synpred11_Mandarax
    public final void synpred11_Mandarax_fragment() throws RecognitionException {   
        annotationList_return a = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:97:10: (a= annotationList )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:97:10: a= annotationList
        {
        pushFollow(FOLLOW_annotationList_in_synpred11_Mandarax332);
        a=annotationList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_Mandarax

    // $ANTLR start synpred14_Mandarax
    public final void synpred14_Mandarax_fragment() throws RecognitionException {   
        annotationList_return a = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:117:8: (a= annotationList )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:117:8: a= annotationList
        {
        pushFollow(FOLLOW_annotationList_in_synpred14_Mandarax520);
        a=annotationList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Mandarax

    // $ANTLR start synpred18_Mandarax
    public final void synpred18_Mandarax_fragment() throws RecognitionException {   
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:19: ( NEWLINE )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:19: NEWLINE
        {
        match(input,NEWLINE,FOLLOW_NEWLINE_in_synpred18_Mandarax592); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Mandarax

    // $ANTLR start synpred19_Mandarax
    public final void synpred19_Mandarax_fragment() throws RecognitionException {   
        external_return x = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:28: (x= external )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:28: x= external
        {
        pushFollow(FOLLOW_external_in_synpred19_Mandarax599);
        x=external();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_Mandarax

    // $ANTLR start synpred20_Mandarax
    public final void synpred20_Mandarax_fragment() throws RecognitionException {   
        rule_return r = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:71: (r= rule )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:121:71: r= rule
        {
        pushFollow(FOLLOW_rule_in_synpred20_Mandarax606);
        r=rule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_Mandarax

    // $ANTLR start synpred54_Mandarax
    public final void synpred54_Mandarax_fragment() throws RecognitionException {   
        expression_return r2 = null;

        expression_return r3 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:263:28: ( '?' r2= expression ':' r3= expression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:263:28: '?' r2= expression ':' r3= expression
        {
        match(input,59,FOLLOW_59_in_synpred54_Mandarax1819); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred54_Mandarax1825);
        r2=expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,30,FOLLOW_30_in_synpred54_Mandarax1827); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred54_Mandarax1833);
        r3=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_Mandarax

    // $ANTLR start synpred55_Mandarax
    public final void synpred55_Mandarax_fragment() throws RecognitionException {   
        conjunction_return part = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:267:55: ( '|' part= conjunction )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:267:55: '|' part= conjunction
        {
        match(input,60,FOLLOW_60_in_synpred55_Mandarax1872); if (state.failed) return ;
        pushFollow(FOLLOW_conjunction_in_synpred55_Mandarax1878);
        part=conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_Mandarax

    // $ANTLR start synpred56_Mandarax
    public final void synpred56_Mandarax_fragment() throws RecognitionException {   
        equalityExpression_return part = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:271:62: ( '&' part= equalityExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:271:62: '&' part= equalityExpression
        {
        match(input,58,FOLLOW_58_in_synpred56_Mandarax1916); if (state.failed) return ;
        pushFollow(FOLLOW_equalityExpression_in_synpred56_Mandarax1923);
        part=equalityExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_Mandarax

    // $ANTLR start synpred58_Mandarax
    public final void synpred58_Mandarax_fragment() throws RecognitionException {   
        Token op=null;
        instanceOfExpression_return part2 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:275:62: (op= ( '==' | '!=' ) part2= instanceOfExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:275:62: op= ( '==' | '!=' ) part2= instanceOfExpression
        {
        op=(Token)input.LT(1);
        if ( (input.LA(1)>=61 && input.LA(1)<=62) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_instanceOfExpression_in_synpred58_Mandarax1977);
        part2=instanceOfExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_Mandarax

    // $ANTLR start synpred59_Mandarax
    public final void synpred59_Mandarax_fragment() throws RecognitionException {   
        type_return t = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:279:38: ( 'instanceof' t= type )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:279:38: 'instanceof' t= type
        {
        match(input,63,FOLLOW_63_in_synpred59_Mandarax2012); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred59_Mandarax2018);
        t=type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_Mandarax

    // $ANTLR start synpred64_Mandarax
    public final void synpred64_Mandarax_fragment() throws RecognitionException {   
        relationalOp_return op = null;

        shiftExpression_return part2 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:291:57: (op= relationalOp part2= shiftExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:291:57: op= relationalOp part2= shiftExpression
        {
        pushFollow(FOLLOW_relationalOp_in_synpred64_Mandarax2181);
        op=relationalOp();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_shiftExpression_in_synpred64_Mandarax2187);
        part2=shiftExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_Mandarax

    // $ANTLR start synpred68_Mandarax
    public final void synpred68_Mandarax_fragment() throws RecognitionException {   
        shiftOp_return op = null;

        additiveExpression_return part = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:304:62: (op= shiftOp part= additiveExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:304:62: op= shiftOp part= additiveExpression
        {
        pushFollow(FOLLOW_shiftOp_in_synpred68_Mandarax2295);
        op=shiftOp();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred68_Mandarax2301);
        part=additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_Mandarax

    // $ANTLR start synpred69_Mandarax
    public final void synpred69_Mandarax_fragment() throws RecognitionException {   
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:308:9: ( '<' '<' )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:308:10: '<' '<'
        {
        match(input,72,FOLLOW_72_in_synpred69_Mandarax2330); if (state.failed) return ;
        match(input,72,FOLLOW_72_in_synpred69_Mandarax2332); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_Mandarax

    // $ANTLR start synpred70_Mandarax
    public final void synpred70_Mandarax_fragment() throws RecognitionException {   
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:311:9: ( '>' '>' '>' )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:311:10: '>' '>' '>'
        {
        match(input,73,FOLLOW_73_in_synpred70_Mandarax2366); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred70_Mandarax2368); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred70_Mandarax2370); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_Mandarax

    // $ANTLR start synpred71_Mandarax
    public final void synpred71_Mandarax_fragment() throws RecognitionException {   
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:316:9: ( '>' '>' )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:316:10: '>' '>'
        {
        match(input,73,FOLLOW_73_in_synpred71_Mandarax2408); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred71_Mandarax2410); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_Mandarax

    // $ANTLR start synpred73_Mandarax
    public final void synpred73_Mandarax_fragment() throws RecognitionException {   
        Token op=null;
        multiplicativeExpression_return part = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:323:66: (op= ( '+' | '-' ) part= multiplicativeExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:323:66: op= ( '+' | '-' ) part= multiplicativeExpression
        {
        op=(Token)input.LT(1);
        if ( (input.LA(1)>=74 && input.LA(1)<=75) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_multiplicativeExpression_in_synpred73_Mandarax2480);
        part=multiplicativeExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_Mandarax

    // $ANTLR start synpred76_Mandarax
    public final void synpred76_Mandarax_fragment() throws RecognitionException {   
        Token op=null;
        unaryExpression_return part = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:327:58: (op= ( '*' | '/' | '%' ) part= unaryExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:327:58: op= ( '*' | '/' | '%' ) part= unaryExpression
        {
        op=(Token)input.LT(1);
        if ( input.LA(1)==27||(input.LA(1)>=76 && input.LA(1)<=77) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_unaryExpression_in_synpred76_Mandarax2538);
        part=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_Mandarax

    // $ANTLR start synpred80_Mandarax
    public final void synpred80_Mandarax_fragment() throws RecognitionException {   
        indomain_return r12 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:338:9: (r12= indomain )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:338:9: r12= indomain
        {
        pushFollow(FOLLOW_indomain_in_synpred80_Mandarax2655);
        r12=indomain();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_Mandarax

    // $ANTLR start synpred82_Mandarax
    public final void synpred82_Mandarax_fragment() throws RecognitionException {   
        castExpression_return r3 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:340:9: (r3= castExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:340:9: r3= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred82_Mandarax2685);
        r3=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_Mandarax

    // $ANTLR start synpred84_Mandarax
    public final void synpred84_Mandarax_fragment() throws RecognitionException {   
        functionInvocation_return r9 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:342:9: (r9= functionInvocation )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:342:9: r9= functionInvocation
        {
        pushFollow(FOLLOW_functionInvocation_in_synpred84_Mandarax2717);
        r9=functionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_Mandarax

    // $ANTLR start synpred85_Mandarax
    public final void synpred85_Mandarax_fragment() throws RecognitionException {   
        methodInvocation_return r8 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:343:9: (r8= methodInvocation )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:343:9: r8= methodInvocation
        {
        pushFollow(FOLLOW_methodInvocation_in_synpred85_Mandarax2733);
        r8=methodInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_Mandarax

    // $ANTLR start synpred86_Mandarax
    public final void synpred86_Mandarax_fragment() throws RecognitionException {   
        propertyAccess_return r7 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:344:9: (r7= propertyAccess )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:344:9: r7= propertyAccess
        {
        pushFollow(FOLLOW_propertyAccess_in_synpred86_Mandarax2749);
        r7=propertyAccess();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_Mandarax

    // $ANTLR start synpred87_Mandarax
    public final void synpred87_Mandarax_fragment() throws RecognitionException {   
        objectref_return r4 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:345:9: (r4= objectref )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:345:9: r4= objectref
        {
        pushFollow(FOLLOW_objectref_in_synpred87_Mandarax2765);
        r4=objectref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_Mandarax

    // $ANTLR start synpred88_Mandarax
    public final void synpred88_Mandarax_fragment() throws RecognitionException {   
        qualifiedName_return r5 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:346:9: (r5= qualifiedName )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:346:9: r5= qualifiedName
        {
        pushFollow(FOLLOW_qualifiedName_in_synpred88_Mandarax2781);
        r5=qualifiedName();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_Mandarax

    // $ANTLR start synpred89_Mandarax
    public final void synpred89_Mandarax_fragment() throws RecognitionException {   
        parExpression_return r6 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:347:9: (r6= parExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:347:9: r6= parExpression
        {
        pushFollow(FOLLOW_parExpression_in_synpred89_Mandarax2797);
        r6=parExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_Mandarax

    // $ANTLR start synpred97_Mandarax
    public final void synpred97_Mandarax_fragment() throws RecognitionException {   
        primitiveType_return t1 = null;

        unaryExpression_return exp1 = null;


        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:379:8: ( '(' t1= primitiveType ')' exp1= unaryExpression )
        // /home/jens/eclipse-workspace/mandarax/grammar/Mandarax.g:379:8: '(' t1= primitiveType ')' exp1= unaryExpression
        {
        match(input,37,FOLLOW_37_in_synpred97_Mandarax3165); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred97_Mandarax3171);
        t1=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,38,FOLLOW_38_in_synpred97_Mandarax3173); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred97_Mandarax3179);
        exp1=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_Mandarax

    // Delegated rules

    public final boolean synpred76_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA13 dfa13 = new DFA13(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA50 dfa50 = new DFA50(this);
    static final String DFA13_eotS =
        "\17\uffff";
    static final String DFA13_eofS =
        "\17\uffff";
    static final String DFA13_minS =
        "\1\4\1\uffff\1\0\1\5\1\36\3\uffff\1\32\2\5\1\6\1\32\2\4";
    static final String DFA13_maxS =
        "\1\52\1\uffff\1\0\1\5\1\36\3\uffff\1\42\1\121\1\5\1\6\1\42\2\41";
    static final String DFA13_acceptS =
        "\1\uffff\1\4\3\uffff\1\1\1\2\1\3\7\uffff";
    static final String DFA13_specialS =
        "\2\uffff\1\0\14\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\2\1\4\33\uffff\1\3\10\uffff\1\1",
            "",
            "\1\uffff",
            "\1\10",
            "\1\11",
            "",
            "",
            "",
            "\1\12\7\uffff\1\13",
            "\5\7\25\uffff\1\7\1\6\4\uffff\1\7\22\uffff\2\7\6\uffff\5\7"+
            "\6\uffff\1\7\2\uffff\4\7",
            "\1\14",
            "\1\15",
            "\1\12\7\uffff\1\13",
            "\1\16\1\4\33\uffff\1\3",
            "\1\16\1\4\33\uffff\1\3"
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()+ loopback of 121:18: ( NEWLINE | x= external | r= rule )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_2 = input.LA(1);

                         
                        int index13_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Mandarax()) ) {s = 5;}

                        else if ( (synpred19_Mandarax()) ) {s = 6;}

                        else if ( (synpred20_Mandarax()) ) {s = 7;}

                         
                        input.seek(index13_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\23\uffff";
    static final String DFA46_eofS =
        "\23\uffff";
    static final String DFA46_minS =
        "\1\110\1\uffff\1\111\1\5\17\uffff";
    static final String DFA46_maxS =
        "\1\111\1\uffff\1\111\1\121\17\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\16\3";
    static final String DFA46_specialS =
        "\1\0\2\uffff\1\1\17\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\1\1\2",
            "",
            "\1\3",
            "\1\10\1\14\1\11\1\12\1\13\33\uffff\1\17\22\uffff\1\15\1\16"+
            "\6\uffff\5\20\4\uffff\1\4\1\uffff\1\5\2\uffff\1\6\1\7\1\22\1"+
            "\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "307:1: shiftOp returns [BinOp value] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_0 = input.LA(1);

                         
                        int index46_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA46_0==72) && (synpred69_Mandarax())) {s = 1;}

                        else if ( (LA46_0==73) ) {s = 2;}

                         
                        input.seek(index46_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA46_3==73) && (synpred70_Mandarax())) {s = 4;}

                        else if ( (LA46_3==75) && (synpred71_Mandarax())) {s = 5;}

                        else if ( (LA46_3==78) && (synpred71_Mandarax())) {s = 6;}

                        else if ( (LA46_3==79) && (synpred71_Mandarax())) {s = 7;}

                        else if ( (LA46_3==Identifier) && (synpred71_Mandarax())) {s = 8;}

                        else if ( (LA46_3==HexLiteral) && (synpred71_Mandarax())) {s = 9;}

                        else if ( (LA46_3==OctalLiteral) && (synpred71_Mandarax())) {s = 10;}

                        else if ( (LA46_3==DecimalLiteral) && (synpred71_Mandarax())) {s = 11;}

                        else if ( (LA46_3==StringLiteral) && (synpred71_Mandarax())) {s = 12;}

                        else if ( (LA46_3==56) && (synpred71_Mandarax())) {s = 13;}

                        else if ( (LA46_3==57) && (synpred71_Mandarax())) {s = 14;}

                        else if ( (LA46_3==37) && (synpred71_Mandarax())) {s = 15;}

                        else if ( ((LA46_3>=64 && LA46_3<=68)) && (synpred71_Mandarax())) {s = 16;}

                        else if ( (LA46_3==81) && (synpred71_Mandarax())) {s = 17;}

                        else if ( (LA46_3==80) && (synpred71_Mandarax())) {s = 18;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA50_eotS =
        "\26\uffff";
    static final String DFA50_eofS =
        "\26\uffff";
    static final String DFA50_minS =
        "\1\5\2\uffff\10\0\13\uffff";
    static final String DFA50_maxS =
        "\1\121\2\uffff\10\0\13\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\1\1\2\10\uffff\1\4\1\6\1\15\1\3\1\7\1\10\1\11\1\12\1"+
        "\13\1\5\1\14";
    static final String DFA50_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\13\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\3\1\7\1\4\1\5\1\6\33\uffff\1\12\22\uffff\1\10\1\11\6\uffff"+
            "\5\13\11\uffff\1\1\1\2\1\15\1\14",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "335:1: unaryExpressionNotPlusMinus returns [Expression value] : ( '~' r1= unaryExpression | '!' r2= unaryExpression | r12= indomain | r13= aggregation | r3= castExpression | r11= constructorInvocation | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression | r10= nullValue );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA50_3 = input.LA(1);

                         
                        int index50_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_Mandarax()) ) {s = 14;}

                        else if ( (synpred84_Mandarax()) ) {s = 15;}

                        else if ( (synpred85_Mandarax()) ) {s = 16;}

                        else if ( (synpred86_Mandarax()) ) {s = 17;}

                        else if ( (synpred87_Mandarax()) ) {s = 18;}

                        else if ( (synpred88_Mandarax()) ) {s = 19;}

                         
                        input.seek(index50_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA50_4 = input.LA(1);

                         
                        int index50_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_Mandarax()) ) {s = 14;}

                        else if ( (synpred85_Mandarax()) ) {s = 16;}

                        else if ( (synpred86_Mandarax()) ) {s = 17;}

                        else if ( (synpred87_Mandarax()) ) {s = 18;}

                         
                        input.seek(index50_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA50_5 = input.LA(1);

                         
                        int index50_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_Mandarax()) ) {s = 14;}

                        else if ( (synpred85_Mandarax()) ) {s = 16;}

                        else if ( (synpred86_Mandarax()) ) {s = 17;}

                        else if ( (synpred87_Mandarax()) ) {s = 18;}

                         
                        input.seek(index50_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA50_6 = input.LA(1);

                         
                        int index50_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_Mandarax()) ) {s = 14;}

                        else if ( (synpred85_Mandarax()) ) {s = 16;}

                        else if ( (synpred86_Mandarax()) ) {s = 17;}

                        else if ( (synpred87_Mandarax()) ) {s = 18;}

                         
                        input.seek(index50_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA50_7 = input.LA(1);

                         
                        int index50_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_Mandarax()) ) {s = 14;}

                        else if ( (synpred85_Mandarax()) ) {s = 16;}

                        else if ( (synpred86_Mandarax()) ) {s = 17;}

                        else if ( (synpred87_Mandarax()) ) {s = 18;}

                         
                        input.seek(index50_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA50_8 = input.LA(1);

                         
                        int index50_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_Mandarax()) ) {s = 14;}

                        else if ( (synpred85_Mandarax()) ) {s = 16;}

                        else if ( (synpred86_Mandarax()) ) {s = 17;}

                        else if ( (synpred87_Mandarax()) ) {s = 18;}

                         
                        input.seek(index50_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA50_9 = input.LA(1);

                         
                        int index50_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_Mandarax()) ) {s = 14;}

                        else if ( (synpred85_Mandarax()) ) {s = 16;}

                        else if ( (synpred86_Mandarax()) ) {s = 17;}

                        else if ( (synpred87_Mandarax()) ) {s = 18;}

                         
                        input.seek(index50_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA50_10 = input.LA(1);

                         
                        int index50_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_Mandarax()) ) {s = 14;}

                        else if ( (synpred82_Mandarax()) ) {s = 20;}

                        else if ( (synpred85_Mandarax()) ) {s = 16;}

                        else if ( (synpred86_Mandarax()) ) {s = 17;}

                        else if ( (synpred87_Mandarax()) ) {s = 18;}

                        else if ( (synpred89_Mandarax()) ) {s = 21;}

                         
                        input.seek(index50_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_NEWLINE_in_compilationUnit71 = new BitSet(new long[]{0x0000000020000010L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit78 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NEWLINE_in_compilationUnit80 = new BitSet(new long[]{0x00FF001A01000030L});
    public static final BitSet FOLLOW_NEWLINE_in_compilationUnit83 = new BitSet(new long[]{0x00FF001A01000030L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit85 = new BitSet(new long[]{0x00FF001A01000030L});
    public static final BitSet FOLLOW_NEWLINE_in_compilationUnit97 = new BitSet(new long[]{0x00FF001A01000032L});
    public static final BitSet FOLLOW_objectDeclaration_in_compilationUnit106 = new BitSet(new long[]{0x00FF001A01000032L});
    public static final BitSet FOLLOW_relationshipDefinition_in_compilationUnit118 = new BitSet(new long[]{0x00FF001A01000032L});
    public static final BitSet FOLLOW_24_in_importDeclaration156 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_25_in_importDeclaration163 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_importDeclaration170 = new BitSet(new long[]{0x0000000014000000L});
    public static final BitSet FOLLOW_26_in_importDeclaration176 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_importDeclaration178 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_importDeclaration182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_packageDeclaration214 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_packageDeclaration219 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_packageDeclaration222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_rule258 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_rule266 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_rule268 = new BitSet(new long[]{0x03000020800003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_conjunction_in_rule275 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_rule280 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_functionInvocation_in_rule286 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_rule300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_external332 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_external340 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_external342 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_32_in_external344 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_external350 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_external352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_annotation383 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_annotation389 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_34_in_annotation391 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_StringLiteral_in_annotation397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_objectDeclaration426 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_objectDeclaration430 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_34_in_objectDeclaration432 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_objectDeclaration438 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_objectDeclaration441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_annotationList475 = new BitSet(new long[]{0x0000000200000012L});
    public static final BitSet FOLLOW_annotation_in_annotationList482 = new BitSet(new long[]{0x0000000200000012L});
    public static final BitSet FOLLOW_annotationList_in_relationshipDefinition520 = new BitSet(new long[]{0x0000001800000000L});
    public static final BitSet FOLLOW_set_in_relationshipDefinition526 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_relationshipDefinition534 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_relationshipDefinition536 = new BitSet(new long[]{0x00FF000000000020L});
    public static final BitSet FOLLOW_variableDeclarationList_in_relationshipDefinition542 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_relationshipDefinition544 = new BitSet(new long[]{0x0000018000000000L});
    public static final BitSet FOLLOW_39_in_relationshipDefinition547 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedNameList2_in_relationshipDefinition553 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_relationshipDefinition562 = new BitSet(new long[]{0x0000300000000020L});
    public static final BitSet FOLLOW_functionDeclarationList_in_relationshipDefinition568 = new BitSet(new long[]{0x0000020000000010L});
    public static final BitSet FOLLOW_NEWLINE_in_relationshipDefinition586 = new BitSet(new long[]{0x0000020000000010L});
    public static final BitSet FOLLOW_41_in_relationshipDefinition589 = new BitSet(new long[]{0x0000000200000030L});
    public static final BitSet FOLLOW_NEWLINE_in_relationshipDefinition592 = new BitSet(new long[]{0x0000040200000030L});
    public static final BitSet FOLLOW_external_in_relationshipDefinition599 = new BitSet(new long[]{0x0000040200000030L});
    public static final BitSet FOLLOW_rule_in_relationshipDefinition606 = new BitSet(new long[]{0x0000040200000030L});
    public static final BitSet FOLLOW_42_in_relationshipDefinition611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_variableDeclaration644 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList690 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_variableDeclarationList695 = new BitSet(new long[]{0x00FF000000000020L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList701 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_visibility_in_functionDeclaration739 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_functionDeclaration745 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_functionDeclaration747 = new BitSet(new long[]{0x0000004000000020L});
    public static final BitSet FOLLOW_nameList_in_functionDeclaration753 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_functionDeclaration755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionDeclarationList794 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_functionDeclarationList799 = new BitSet(new long[]{0x0000300000000020L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionDeclarationList805 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_44_in_visibility837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_visibility842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type957 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_46_in_type960 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_type962 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type975 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_46_in_type978 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_type980 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType1004 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_classOrInterfaceType1009 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType1015 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_48_in_primitiveType1043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_primitiveType1055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_primitiveType1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_primitiveType1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_primitiveType1091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_primitiveType1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_primitiveType1115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_primitiveType1127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList1153 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_qualifiedNameList1156 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList1158 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName1182 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_qualifiedName1187 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName1193 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_qualifiedName2_in_qualifiedNameList21226 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_qualifiedNameList21231 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_qualifiedNameList21237 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName21264 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_qualifiedName21269 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName21275 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_Identifier_in_nameList1306 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_nameList1311 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_nameList1317 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal1348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal1382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral1412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral1428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral1444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_floatingPointLiteral1473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_booleanLiteral1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_booleanLiteral1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1544 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_elementValuePairs1547 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1549 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair1570 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_34_in_elementValuePair1572 = new BitSet(new long[]{0x03000220000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue1597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_elementValueArrayInitializer1630 = new BitSet(new long[]{0x03000E20000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1633 = new BitSet(new long[]{0x00000C0000000000L});
    public static final BitSet FOLLOW_43_in_elementValueArrayInitializer1636 = new BitSet(new long[]{0x03000220000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1638 = new BitSet(new long[]{0x00000C0000000000L});
    public static final BitSet FOLLOW_43_in_elementValueArrayInitializer1645 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_elementValueArrayInitializer1649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_parExpression1678 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_parExpression1684 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_parExpression1686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_commaSeparatedExpressionList1724 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_commaSeparatedExpressionList1729 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_commaSeparatedExpressionList1735 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_expression_in_andSeparatedExpressionList1772 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_58_in_andSeparatedExpressionList1777 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_andSeparatedExpressionList1783 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_disjunction_in_conditionalExpression1815 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_59_in_conditionalExpression1819 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_conditionalExpression1825 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_conditionalExpression1827 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_conditionalExpression1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_disjunction1866 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_60_in_disjunction1872 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_conjunction_in_disjunction1878 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_conjunction1910 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_58_in_conjunction1916 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_equalityExpression_in_conjunction1923 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression1955 = new BitSet(new long[]{0x6000000000000002L});
    public static final BitSet FOLLOW_set_in_equalityExpression1965 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression1977 = new BitSet(new long[]{0x6000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression2009 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_instanceOfExpression2012 = new BitSet(new long[]{0x00FF000000000020L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression2018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_aggregation2057 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_aggregation2081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_aggregation2083 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_relationalExpression_in_aggregation2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_indomain2126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_indomain2130 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_indomain2136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression2171 = new BitSet(new long[]{0x0000000000000002L,0x00000000000003C0L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression2181 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression2187 = new BitSet(new long[]{0x0000000000000002L,0x00000000000003C0L});
    public static final BitSet FOLLOW_70_in_relationalOp2221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_relationalOp2233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_relationalOp2243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_relationalOp2255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression2285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000300L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression2295 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_shiftOp2338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_shiftOp2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_shiftOp2376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_shiftOp2380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_shiftOp2384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_shiftOp2416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_shiftOp2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression2459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000C00L});
    public static final BitSet FOLLOW_set_in_additiveExpression2468 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression2480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000C00L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression2511 = new BitSet(new long[]{0x0000000008000002L,0x0000000000003000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression2520 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression2538 = new BitSet(new long[]{0x0000000008000002L,0x0000000000003000L});
    public static final BitSet FOLLOW_75_in_unaryExpression2570 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression2576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression2592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_unaryExpressionNotPlusMinus2615 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_unaryExpressionNotPlusMinus2633 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indomain_in_unaryExpressionNotPlusMinus2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregation_in_unaryExpressionNotPlusMinus2670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus2685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructorInvocation_in_unaryExpressionNotPlusMinus2701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionInvocation_in_unaryExpressionNotPlusMinus2717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodInvocation_in_unaryExpressionNotPlusMinus2733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyAccess_in_unaryExpressionNotPlusMinus2749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_unaryExpressionNotPlusMinus2765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_unaryExpressionNotPlusMinus2781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_unaryExpressionNotPlusMinus2797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nullValue_in_unaryExpressionNotPlusMinus2813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nullValue2842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_propertyAccess2878 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_propertyAccess2883 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_propertyAccess2888 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_objectref_in_methodInvocation2921 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_methodInvocation2926 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_methodInvocation2932 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_methodInvocation2934 = new BitSet(new long[]{0x03000060000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_methodInvocation2940 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_methodInvocation2944 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_Identifier_in_functionInvocation2981 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_functionInvocation2984 = new BitSet(new long[]{0x03000060000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_functionInvocation2991 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_functionInvocation2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_constructorInvocation3045 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_constructorInvocation3051 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_constructorInvocation3054 = new BitSet(new long[]{0x03000060000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_constructorInvocation3061 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_constructorInvocation3065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_objectref3102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_objectref3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_objectref3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_castExpression3165 = new BitSet(new long[]{0x00FF000000000020L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression3171 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_castExpression3173 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression3179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_castExpression3190 = new BitSet(new long[]{0x00FF000000000020L});
    public static final BitSet FOLLOW_type_in_castExpression3196 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_castExpression3198 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression3204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_arguments3226 = new BitSet(new long[]{0x03000060000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_arguments3228 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_arguments3231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_synpred2_Mandarax83 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_synpred4_Mandarax97 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationshipDefinition_in_synpred6_Mandarax118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_synpred9_Mandarax258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_synpred11_Mandarax332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_synpred14_Mandarax520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_synpred18_Mandarax592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_external_in_synpred19_Mandarax599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_synpred20_Mandarax606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_synpred54_Mandarax1819 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_synpred54_Mandarax1825 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_synpred54_Mandarax1827 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_expression_in_synpred54_Mandarax1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_synpred55_Mandarax1872 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_conjunction_in_synpred55_Mandarax1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_synpred56_Mandarax1916 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_equalityExpression_in_synpred56_Mandarax1923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred58_Mandarax1965 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_instanceOfExpression_in_synpred58_Mandarax1977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_synpred59_Mandarax2012 = new BitSet(new long[]{0x00FF000000000020L});
    public static final BitSet FOLLOW_type_in_synpred59_Mandarax2018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_synpred64_Mandarax2181 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_shiftExpression_in_synpred64_Mandarax2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred68_Mandarax2295 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_additiveExpression_in_synpred68_Mandarax2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_synpred69_Mandarax2330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_synpred69_Mandarax2332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_synpred70_Mandarax2366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred70_Mandarax2368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred70_Mandarax2370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_synpred71_Mandarax2408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred71_Mandarax2410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred73_Mandarax2468 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_multiplicativeExpression_in_synpred73_Mandarax2480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred76_Mandarax2520 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_unaryExpression_in_synpred76_Mandarax2538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indomain_in_synpred80_Mandarax2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred82_Mandarax2685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionInvocation_in_synpred84_Mandarax2717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodInvocation_in_synpred85_Mandarax2733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyAccess_in_synpred86_Mandarax2749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_synpred87_Mandarax2765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_synpred88_Mandarax2781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_synpred89_Mandarax2797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_synpred97_Mandarax3165 = new BitSet(new long[]{0x00FF000000000020L});
    public static final BitSet FOLLOW_primitiveType_in_synpred97_Mandarax3171 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_synpred97_Mandarax3173 = new BitSet(new long[]{0x03000020000003E0L,0x000000000003C81FL});
    public static final BitSet FOLLOW_unaryExpression_in_synpred97_Mandarax3179 = new BitSet(new long[]{0x0000000000000002L});

}