package org.mandarax.examples.userv.rules.generated;
 
import org.mandarax.examples.userv.domain.*;

import org.mandarax.rt.*;

/**
 * Interface for queries for relationship <strong>BasePremium</strong>.
 * Generated by org.mandarax.compiler.impl.DefaultCompiler.
 * @version Dec 2, 2010 1:53:25 PM 
 */
public class BasePremiumRelInstances {
	// object references
	
	
	// fields representing annotations
	
	// rule: AP_01: _car.getIsCompact() -> BasePremium(_car,250);
	private final static java.util.Properties _annotations_AP_01 = new java.util.Properties();
	
	// rule: AP_02: _car.getIsSedan() -> BasePremium(_car,400);
	private final static java.util.Properties _annotations_AP_02 = new java.util.Properties();
	
	// rule: AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
	private final static java.util.Properties _annotations_AP_03 = new java.util.Properties();
	
	
	// initialise annotations
	static {
		// relationship annotations for rule  AP_01: _car.getIsCompact() -> BasePremium(_car,250);
		_annotations_AP_01.put("category","Auto Premiums Rule Set");
		_annotations_AP_01.put("author","Jens Dietrich");
		_annotations_AP_01.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_01: _car.getIsCompact() -> BasePremium(_car,250);
		_annotations_AP_01.put("description","If compact car, then base premium is $250");
		
		
	
		// relationship annotations for rule  AP_02: _car.getIsSedan() -> BasePremium(_car,400);
		_annotations_AP_02.put("category","Auto Premiums Rule Set");
		_annotations_AP_02.put("author","Jens Dietrich");
		_annotations_AP_02.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_02: _car.getIsSedan() -> BasePremium(_car,400);
		_annotations_AP_02.put("description","If sedan, then base premium is $400");
		
		
	
		// relationship annotations for rule  AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
		_annotations_AP_03.put("category","Auto Premiums Rule Set");
		_annotations_AP_03.put("author","Jens Dietrich");
		_annotations_AP_03.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
		_annotations_AP_03.put("description","If luxury car, then base premium is $500");
		
		
	}
		
	

	// interface generated for queries	
	 
	public static ResultSet<BasePremiumRel> getPremium (  Car car  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<BasePremiumRel>(getPremium ( _derivation ,  car ),_derivation);
	} 
	 
	public static ResultSet<BasePremiumRel> hasPremium (  Car car ,  int premium  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<BasePremiumRel>(hasPremium ( _derivation ,  car ,  premium ),_derivation);
	} 
	
	
	// implementations - these methods are referenced by code generated from other rules in this package
	// and therefore kept static 
	 
	static ResourceIterator<BasePremiumRel> getPremium ( final DerivationController _derivation ,  final Car car  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<BasePremiumRel>(3) {
			
			public ResourceIterator<BasePremiumRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke AP_01: _car.getIsCompact() -> BasePremium(_car,250);
                			return getPremium_0(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 1: {
                			// invoke AP_02: _car.getIsSedan() -> BasePremium(_car,400);
                			return getPremium_1(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 2: {
                			// invoke AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
                			return getPremium_2(_derivation.pop(_derivationlevel) ,  car );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	 
	static ResourceIterator<BasePremiumRel> hasPremium ( final DerivationController _derivation ,  final Car car ,  final int premium  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<BasePremiumRel>(3) {
			
			public ResourceIterator<BasePremiumRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke AP_01: _car.getIsCompact() -> BasePremium(_car,250);
                			return hasPremium_0(_derivation.pop(_derivationlevel) ,  car ,  premium );
                		}
				
                		case 1: {
                			// invoke AP_02: _car.getIsSedan() -> BasePremium(_car,400);
                			return hasPremium_1(_derivation.pop(_derivationlevel) ,  car ,  premium );
                		}
				
                		case 2: {
                			// invoke AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
                			return hasPremium_2(_derivation.pop(_derivationlevel) ,  car ,  premium );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	
	
	
	// private methods - each method represents the invocation of a single rule for a certain query
	// query: getPremium
	// rule: AP_01: _car.getIsCompact() -> BasePremium(_car,250);
	private static ResourceIterator<BasePremiumRel> getPremium_0 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.BasePremium.AP_01", DerivationController.RULE, _annotations_AP_01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_01: _car.getIsCompact() -> BasePremium(_car,250);
		// prereqs: [_car.getIsCompact()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getIsCompact()
		
		
		 // case 4
					if (!(_bindings._car.isCompact())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new BasePremiumRel(_bindings._car,250));
        
		
		
		
	

	}
	// rule: AP_02: _car.getIsSedan() -> BasePremium(_car,400);
	private static ResourceIterator<BasePremiumRel> getPremium_1 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.BasePremium.AP_02", DerivationController.RULE, _annotations_AP_02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_02: _car.getIsSedan() -> BasePremium(_car,400);
		// prereqs: [_car.getIsSedan()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getIsSedan()
		
		
		 // case 4
					if (!(_bindings._car.isSedan())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new BasePremiumRel(_bindings._car,400));
        
		
		
		
	

	}
	// rule: AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
	private static ResourceIterator<BasePremiumRel> getPremium_2 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.BasePremium.AP_03", DerivationController.RULE, _annotations_AP_03);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
		// prereqs: [_car.getIsLuxury()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getIsLuxury()
		
		
		 // case 4
					if (!(_bindings._car.isLuxury())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new BasePremiumRel(_bindings._car,500));
        
		
		
		
	

	}
	// query: hasPremium
	// rule: AP_01: _car.getIsCompact() -> BasePremium(_car,250);
	private static ResourceIterator<BasePremiumRel> hasPremium_0 (final DerivationController _derivation ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.BasePremium.AP_01", DerivationController.RULE, _annotations_AP_01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_01: _car.getIsCompact() -> BasePremium(_car,250);
		// prereqs: [_car.getIsCompact()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,250); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getIsCompact()
		
		
		 // case 4
					if (!(_bindings._car.isCompact())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new BasePremiumRel(_bindings._car,250));
        
		
		
		
	

	}
	// rule: AP_02: _car.getIsSedan() -> BasePremium(_car,400);
	private static ResourceIterator<BasePremiumRel> hasPremium_1 (final DerivationController _derivation ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.BasePremium.AP_02", DerivationController.RULE, _annotations_AP_02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_02: _car.getIsSedan() -> BasePremium(_car,400);
		// prereqs: [_car.getIsSedan()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,400); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getIsSedan()
		
		
		 // case 4
					if (!(_bindings._car.isSedan())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new BasePremiumRel(_bindings._car,400));
        
		
		
		
	

	}
	// rule: AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
	private static ResourceIterator<BasePremiumRel> hasPremium_2 (final DerivationController _derivation ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.BasePremium.AP_03", DerivationController.RULE, _annotations_AP_03);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_03: _car.getIsLuxury() -> BasePremium(_car,500);
		// prereqs: [_car.getIsLuxury()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,500); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getIsLuxury()
		
		
		 // case 4
					if (!(_bindings._car.isLuxury())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new BasePremiumRel(_bindings._car,500));
        
		
		
		
	

	}
	
	
	// methods representing aggregation functions
	
	
}


