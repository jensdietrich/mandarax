package org.mandarax.examples.userv.rules.generated;
 
import org.mandarax.examples.userv.domain.*;

import org.mandarax.rt.*;

/**
 * Interface for queries for relationship <strong>AdditionalPremium</strong>.
 * Generated by org.mandarax.compiler.impl.DefaultCompiler.
 * @version Dec 2, 2010 1:53:25 PM 
 */
public class AdditionalPremiumRelInstances {
	// object references
	 
	public static int CurrentYear = 2001;
	 
	public static int NextYear = CurrentYear+1;
	
	
	// fields representing annotations
	
	// rule: AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
	private final static java.util.Properties _annotations_AP_04 = new java.util.Properties();
	
	// rule: AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
	private final static java.util.Properties _annotations_AP_07 = new java.util.Properties();
	
	// rule: AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
	private final static java.util.Properties _annotations_AP_08 = new java.util.Properties();
	
	// rule: AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
	private final static java.util.Properties _annotations_AP_09 = new java.util.Properties();
	
	// rule: AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
	private final static java.util.Properties _annotations_AP_10 = new java.util.Properties();
	
	// rule: AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
	private final static java.util.Properties _annotations_AP_11 = new java.util.Properties();
	
	// rule: AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
	private final static java.util.Properties _annotations_AP_12 = new java.util.Properties();
	
	// rule: AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
	private final static java.util.Properties _annotations_AP_13 = new java.util.Properties();
	
	
	// initialise annotations
	static {
		// relationship annotations for rule  AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
		_annotations_AP_04.put("category","Auto Premiums Rule Set");
		_annotations_AP_04.put("author","Jens Dietrich");
		_annotations_AP_04.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
		_annotations_AP_04.put("description","If car is new, then increase premium by $400");
		
		
	
		// relationship annotations for rule  AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
		_annotations_AP_07.put("category","Auto Premiums Rule Set");
		_annotations_AP_07.put("author","Jens Dietrich");
		_annotations_AP_07.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
		
		
	
		// relationship annotations for rule  AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
		_annotations_AP_08.put("category","Auto Premiums Rule Set");
		_annotations_AP_08.put("author","Jens Dietrich");
		_annotations_AP_08.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
		_annotations_AP_08.put("description","If car is between 5 and 10 years old, then increase premium by $250");
		
		
	
		// relationship annotations for rule  AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
		_annotations_AP_09.put("category","Auto Premiums Rule Set");
		_annotations_AP_09.put("author","Jens Dietrich");
		_annotations_AP_09.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
		_annotations_AP_09.put("description","If uninsured motorist coverage is included, then increase premium by $300");
		
		
	
		// relationship annotations for rule  AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
		_annotations_AP_10.put("category","Auto Premiums Rule Set");
		_annotations_AP_10.put("author","Jens Dietrich");
		_annotations_AP_10.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
		_annotations_AP_10.put("description","If medical coverage is included, then increase premium by $600");
		
		
	
		// relationship annotations for rule  AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
		_annotations_AP_11.put("category","Auto Premiums Rule Set");
		_annotations_AP_11.put("author","Jens Dietrich");
		_annotations_AP_11.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
		_annotations_AP_11.put("description","If Potential Occupant Injury is Extremely High, then increase premium by $1,000");
		
		
	
		// relationship annotations for rule  AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
		_annotations_AP_12.put("category","Auto Premiums Rule Set");
		_annotations_AP_12.put("author","Jens Dietrich");
		_annotations_AP_12.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
		_annotations_AP_12.put("description","If Potential Occupant Injury is High, then increase premium by $500");
		
		
	
		// relationship annotations for rule  AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
		_annotations_AP_13.put("category","Auto Premiums Rule Set");
		_annotations_AP_13.put("author","Jens Dietrich");
		_annotations_AP_13.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
		_annotations_AP_13.put("description","If Potential Theft is High, then increase premium by $500");
		
		
	}
		
	

	// interface generated for queries	
	 
	public static ResultSet<AdditionalPremiumRel> getPremium (  Policy policy ,  Car car  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<AdditionalPremiumRel>(getPremium ( _derivation ,  policy ,  car ),_derivation);
	} 
	 
	public static ResultSet<AdditionalPremiumRel> hasPremium (  Policy policy ,  Car car ,  int premium  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<AdditionalPremiumRel>(hasPremium ( _derivation ,  policy ,  car ,  premium ),_derivation);
	} 
	
	
	// implementations - these methods are referenced by code generated from other rules in this package
	// and therefore kept static 
	 
	static ResourceIterator<AdditionalPremiumRel> getPremium ( final DerivationController _derivation ,  final Policy policy ,  final Car car  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<AdditionalPremiumRel>(8) {
			
			public ResourceIterator<AdditionalPremiumRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
                			return getPremium_0(_derivation.pop(_derivationlevel) ,  policy ,  car );
                		}
				
                		case 1: {
                			// invoke AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
                			return getPremium_1(_derivation.pop(_derivationlevel) ,  policy ,  car );
                		}
				
                		case 2: {
                			// invoke AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
                			return getPremium_2(_derivation.pop(_derivationlevel) ,  policy ,  car );
                		}
				
                		case 3: {
                			// invoke AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
                			return getPremium_3(_derivation.pop(_derivationlevel) ,  policy ,  car );
                		}
				
                		case 4: {
                			// invoke AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
                			return getPremium_4(_derivation.pop(_derivationlevel) ,  policy ,  car );
                		}
				
                		case 5: {
                			// invoke AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
                			return getPremium_5(_derivation.pop(_derivationlevel) ,  policy ,  car );
                		}
				
                		case 6: {
                			// invoke AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
                			return getPremium_6(_derivation.pop(_derivationlevel) ,  policy ,  car );
                		}
				
                		case 7: {
                			// invoke AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
                			return getPremium_7(_derivation.pop(_derivationlevel) ,  policy ,  car );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	 
	static ResourceIterator<AdditionalPremiumRel> hasPremium ( final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<AdditionalPremiumRel>(8) {
			
			public ResourceIterator<AdditionalPremiumRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
                			return hasPremium_0(_derivation.pop(_derivationlevel) ,  policy ,  car ,  premium );
                		}
				
                		case 1: {
                			// invoke AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
                			return hasPremium_1(_derivation.pop(_derivationlevel) ,  policy ,  car ,  premium );
                		}
				
                		case 2: {
                			// invoke AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
                			return hasPremium_2(_derivation.pop(_derivationlevel) ,  policy ,  car ,  premium );
                		}
				
                		case 3: {
                			// invoke AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
                			return hasPremium_3(_derivation.pop(_derivationlevel) ,  policy ,  car ,  premium );
                		}
				
                		case 4: {
                			// invoke AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
                			return hasPremium_4(_derivation.pop(_derivationlevel) ,  policy ,  car ,  premium );
                		}
				
                		case 5: {
                			// invoke AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
                			return hasPremium_5(_derivation.pop(_derivationlevel) ,  policy ,  car ,  premium );
                		}
				
                		case 6: {
                			// invoke AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
                			return hasPremium_6(_derivation.pop(_derivationlevel) ,  policy ,  car ,  premium );
                		}
				
                		case 7: {
                			// invoke AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
                			return hasPremium_7(_derivation.pop(_derivationlevel) ,  policy ,  car ,  premium );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	
	
	
	// private methods - each method represents the invocation of a single rule for a certain query
	// query: getPremium
	// rule: AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
	private static ResourceIterator<AdditionalPremiumRel> getPremium_0 (final DerivationController _derivation ,  final Policy policy ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_04", DerivationController.RULE, _annotations_AP_04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
		// prereqs: [IsNew(_car)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite IsNew(_car)
		
		
		 // case 4
					
					_tmp = IsNewRelInstances.isNew(_derivation.push(),_bindings._car);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,400));
        
		
		
		
	

	}
	// rule: AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
	private static ResourceIterator<AdditionalPremiumRel> getPremium_1 (final DerivationController _derivation ,  final Policy policy ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_07", DerivationController.RULE, _annotations_AP_07);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
		// prereqs: [(_car.getAge())<5, not IsNew(_car)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_car.getAge())<5
		
		
		 // case 4
					if (!((_bindings._car.getAge())<5)) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite not IsNew(_car)
		
		
		 // case 4
					
					_tmp = IsNewRelInstances.isNew(_derivation.push(),_bindings._car);
					
					if (_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,300));
        
		
		
		
	

	}
	// rule: AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
	private static ResourceIterator<AdditionalPremiumRel> getPremium_2 (final DerivationController _derivation ,  final Policy policy ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_08", DerivationController.RULE, _annotations_AP_08);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
		// prereqs: [(_car.getAge())>=5, (_car.getAge())<=10]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_car.getAge())>=5
		
		
		 // case 4
					if (!((_bindings._car.getAge())>=5)) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite (_car.getAge())<=10
		
		
		 // case 4
					if (!((_bindings._car.getAge())<=10)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,250));
        
		
		
		
	

	}
	// rule: AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
	private static ResourceIterator<AdditionalPremiumRel> getPremium_3 (final DerivationController _derivation ,  final Policy policy ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_09", DerivationController.RULE, _annotations_AP_09);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
		// prereqs: [_policy.getIncludesUninsuredMotoristCoverage()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _policy.getIncludesUninsuredMotoristCoverage()
		
		
		 // case 4
					if (!(_bindings._policy.includesUninsuredMotoristCoverage())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,300));
        
		
		
		
	

	}
	// rule: AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
	private static ResourceIterator<AdditionalPremiumRel> getPremium_4 (final DerivationController _derivation ,  final Policy policy ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_10", DerivationController.RULE, _annotations_AP_10);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
		// prereqs: [_policy.getIncludesMedicalCoverage()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _policy.getIncludesMedicalCoverage()
		
		
		 // case 4
					if (!(_bindings._policy.includesMedicalCoverage())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,600));
        
		
		
		
	

	}
	// rule: AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
	private static ResourceIterator<AdditionalPremiumRel> getPremium_5 (final DerivationController _derivation ,  final Policy policy ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_11", DerivationController.RULE, _annotations_AP_11);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
		// prereqs: [PotentialOccupantInjuryRating(_car,"extremely high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialOccupantInjuryRating(_car,"extremely high")
		
		
		 // case 4
					
					_tmp = PotentialOccupantInjuryRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"extremely high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,1000));
        
		
		
		
	

	}
	// rule: AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
	private static ResourceIterator<AdditionalPremiumRel> getPremium_6 (final DerivationController _derivation ,  final Policy policy ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_12", DerivationController.RULE, _annotations_AP_12);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
		// prereqs: [PotentialOccupantInjuryRating(_car,"high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialOccupantInjuryRating(_car,"high")
		
		
		 // case 4
					
					_tmp = PotentialOccupantInjuryRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,500));
        
		
		
		
	

	}
	// rule: AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
	private static ResourceIterator<AdditionalPremiumRel> getPremium_7 (final DerivationController _derivation ,  final Policy policy ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_13", DerivationController.RULE, _annotations_AP_13);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
		// prereqs: [PotentialTheftRating(_car,"high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialTheftRating(_car,"high")
		
		
		 // case 4
					
					_tmp = PotentialTheftRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,500));
        
		
		
		
	

	}
	// query: hasPremium
	// rule: AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
	private static ResourceIterator<AdditionalPremiumRel> hasPremium_0 (final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_04", DerivationController.RULE, _annotations_AP_04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_04: IsNew(_car) -> AdditionalPremium(_policy,_car,400);
		// prereqs: [IsNew(_car)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,400); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite IsNew(_car)
		
		
		 // case 4
					
					_tmp = IsNewRelInstances.isNew(_derivation.push(),_bindings._car);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,400));
        
		
		
		
	

	}
	// rule: AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
	private static ResourceIterator<AdditionalPremiumRel> hasPremium_1 (final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_07", DerivationController.RULE, _annotations_AP_07);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_07: (_car.getAge())<5 & not IsNew(_car) -> AdditionalPremium(_policy,_car,300);
		// prereqs: [(_car.getAge())<5, not IsNew(_car)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,300); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_car.getAge())<5
		
		
		 // case 4
					if (!((_bindings._car.getAge())<5)) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite not IsNew(_car)
		
		
		 // case 4
					
					_tmp = IsNewRelInstances.isNew(_derivation.push(),_bindings._car);
					
					if (_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,300));
        
		
		
		
	

	}
	// rule: AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
	private static ResourceIterator<AdditionalPremiumRel> hasPremium_2 (final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_08", DerivationController.RULE, _annotations_AP_08);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_08: (_car.getAge())>=5 & (_car.getAge())<=10 -> AdditionalPremium(_policy,_car,250);
		// prereqs: [(_car.getAge())>=5, (_car.getAge())<=10]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,250); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_car.getAge())>=5
		
		
		 // case 4
					if (!((_bindings._car.getAge())>=5)) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite (_car.getAge())<=10
		
		
		 // case 4
					if (!((_bindings._car.getAge())<=10)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,250));
        
		
		
		
	

	}
	// rule: AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
	private static ResourceIterator<AdditionalPremiumRel> hasPremium_3 (final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_09", DerivationController.RULE, _annotations_AP_09);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_09: _policy.getIncludesUninsuredMotoristCoverage() -> AdditionalPremium(_policy,_car,300);
		// prereqs: [_policy.getIncludesUninsuredMotoristCoverage()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,300); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _policy.getIncludesUninsuredMotoristCoverage()
		
		
		 // case 4
					if (!(_bindings._policy.includesUninsuredMotoristCoverage())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,300));
        
		
		
		
	

	}
	// rule: AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
	private static ResourceIterator<AdditionalPremiumRel> hasPremium_4 (final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_10", DerivationController.RULE, _annotations_AP_10);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_10: _policy.getIncludesMedicalCoverage() -> AdditionalPremium(_policy,_car,600);
		// prereqs: [_policy.getIncludesMedicalCoverage()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,600); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _policy.getIncludesMedicalCoverage()
		
		
		 // case 4
					if (!(_bindings._policy.includesMedicalCoverage())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,600));
        
		
		
		
	

	}
	// rule: AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
	private static ResourceIterator<AdditionalPremiumRel> hasPremium_5 (final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_11", DerivationController.RULE, _annotations_AP_11);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_11: PotentialOccupantInjuryRating(_car,"extremely high") -> AdditionalPremium(_policy,_car,1000);
		// prereqs: [PotentialOccupantInjuryRating(_car,"extremely high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,1000); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialOccupantInjuryRating(_car,"extremely high")
		
		
		 // case 4
					
					_tmp = PotentialOccupantInjuryRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"extremely high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,1000));
        
		
		
		
	

	}
	// rule: AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
	private static ResourceIterator<AdditionalPremiumRel> hasPremium_6 (final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_12", DerivationController.RULE, _annotations_AP_12);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_12: PotentialOccupantInjuryRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
		// prereqs: [PotentialOccupantInjuryRating(_car,"high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,500); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialOccupantInjuryRating(_car,"high")
		
		
		 // case 4
					
					_tmp = PotentialOccupantInjuryRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,500));
        
		
		
		
	

	}
	// rule: AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
	private static ResourceIterator<AdditionalPremiumRel> hasPremium_7 (final DerivationController _derivation ,  final Policy policy ,  final Car car ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalPremium.AP_13", DerivationController.RULE, _annotations_AP_13);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AP_13: PotentialTheftRating(_car,"high") -> AdditionalPremium(_policy,_car,500);
		// prereqs: [PotentialTheftRating(_car,"high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Policy _policy = policy;
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,500); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialTheftRating(_car,"high")
		
		
		 // case 4
					
					_tmp = PotentialTheftRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalPremiumRel(_bindings._policy,_bindings._car,500));
        
		
		
		
	

	}
	
	
	// methods representing aggregation functions
	
	
}


