package org.mandarax.examples.userv.rules.generated;
 
import org.mandarax.examples.userv.domain.*;

import org.mandarax.rt.*;

/**
 * Interface for queries for relationship <strong>AutoEligibility</strong>.
 * Generated by org.mandarax.compiler.impl.DefaultCompiler.
 * @version Dec 2, 2010 1:53:25 PM 
 */
public class AutoEligibilityRelInstances {
	// object references
	
	
	// fields representing annotations
	
	// rule: AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
	private final static java.util.Properties _annotations_AE_01 = new java.util.Properties();
	
	// rule: AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
	private final static java.util.Properties _annotations_AE_02 = new java.util.Properties();
	
	// rule: AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
	private final static java.util.Properties _annotations_AE_03 = new java.util.Properties();
	
	// rule: AE_04:  -> AutoEligibility(_car,"eligible");
	private final static java.util.Properties _annotations_AE_04 = new java.util.Properties();
	
	
	// initialise annotations
	static {
		// relationship annotations for rule  AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
		_annotations_AE_01.put("category","Auto Eligibility Rule Set");
		_annotations_AE_01.put("author","Jens Dietrich");
		_annotations_AE_01.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
		_annotations_AE_01.put("description","If the Potential Occupant Injury Rating is extremely high, then the auto eligibility is 'not eligible'");
		
		
	
		// relationship annotations for rule  AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
		_annotations_AE_02.put("category","Auto Eligibility Rule Set");
		_annotations_AE_02.put("author","Jens Dietrich");
		_annotations_AE_02.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
		_annotations_AE_02.put("description","If the Potential Occupant Injury Rating is high, then the auto eligibility is 'provisional'");
		
		
	
		// relationship annotations for rule  AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
		_annotations_AE_03.put("category","Auto Eligibility Rule Set");
		_annotations_AE_03.put("author","Jens Dietrich");
		_annotations_AE_03.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
		_annotations_AE_03.put("description","If the Potential Theft Rating is high, then the auto eligibility is 'provisional'");
		
		
	
		// relationship annotations for rule  AE_04:  -> AutoEligibility(_car,"eligible");
		_annotations_AE_04.put("category","Auto Eligibility Rule Set");
		_annotations_AE_04.put("author","Jens Dietrich");
		_annotations_AE_04.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_04:  -> AutoEligibility(_car,"eligible");
		_annotations_AE_04.put("description","If none of the following is true, then the auto eligibility is 'eligible': Auto eligibility is 'not eligible',Auto eligibility is 'provisional'");
		
		
	}
		
	

	// interface generated for queries	
	 
	public static ResultSet<AutoEligibilityRel> getRating (  Car car  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<AutoEligibilityRel>(getRating ( _derivation ,  car ),_derivation);
	} 
	 
	public static ResultSet<AutoEligibilityRel> hasRating (  Car car ,  String eligibility  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<AutoEligibilityRel>(hasRating ( _derivation ,  car ,  eligibility ),_derivation);
	} 
	
	
	// implementations - these methods are referenced by code generated from other rules in this package
	// and therefore kept static 
	 
	static ResourceIterator<AutoEligibilityRel> getRating ( final DerivationController _derivation ,  final Car car  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<AutoEligibilityRel>(4) {
			
			public ResourceIterator<AutoEligibilityRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
                			return getRating_0(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 1: {
                			// invoke AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
                			return getRating_1(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 2: {
                			// invoke AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
                			return getRating_2(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 3: {
                			// invoke AE_04:  -> AutoEligibility(_car,"eligible");
                			return getRating_3(_derivation.pop(_derivationlevel) ,  car );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	 
	static ResourceIterator<AutoEligibilityRel> hasRating ( final DerivationController _derivation ,  final Car car ,  final String eligibility  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<AutoEligibilityRel>(4) {
			
			public ResourceIterator<AutoEligibilityRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
                			return hasRating_0(_derivation.pop(_derivationlevel) ,  car ,  eligibility );
                		}
				
                		case 1: {
                			// invoke AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
                			return hasRating_1(_derivation.pop(_derivationlevel) ,  car ,  eligibility );
                		}
				
                		case 2: {
                			// invoke AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
                			return hasRating_2(_derivation.pop(_derivationlevel) ,  car ,  eligibility );
                		}
				
                		case 3: {
                			// invoke AE_04:  -> AutoEligibility(_car,"eligible");
                			return hasRating_3(_derivation.pop(_derivationlevel) ,  car ,  eligibility );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	
	
	
	// private methods - each method represents the invocation of a single rule for a certain query
	// query: getRating
	// rule: AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
	private static ResourceIterator<AutoEligibilityRel> getRating_0 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AutoEligibility.AE_01", DerivationController.RULE, _annotations_AE_01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
		// prereqs: [PotentialOccupantInjuryRating(_car,"extremely high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialOccupantInjuryRating(_car,"extremely high")
		
		
		 // case 4
					
					_tmp = PotentialOccupantInjuryRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"extremely high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AutoEligibilityRel(_bindings._car,"not eligible"));
        
		
		
		
	

	}
	// rule: AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
	private static ResourceIterator<AutoEligibilityRel> getRating_1 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AutoEligibility.AE_02", DerivationController.RULE, _annotations_AE_02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
		// prereqs: [PotentialOccupantInjuryRating(_car,"high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialOccupantInjuryRating(_car,"high")
		
		
		 // case 4
					
					_tmp = PotentialOccupantInjuryRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AutoEligibilityRel(_bindings._car,"provisional"));
        
		
		
		
	

	}
	// rule: AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
	private static ResourceIterator<AutoEligibilityRel> getRating_2 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AutoEligibility.AE_03", DerivationController.RULE, _annotations_AE_03);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
		// prereqs: [PotentialTheftRating(_car,"high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialTheftRating(_car,"high")
		
		
		 // case 4
					
					_tmp = PotentialTheftRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AutoEligibilityRel(_bindings._car,"provisional"));
        
		
		
		
	

	}
	// rule: AE_04:  -> AutoEligibility(_car,"eligible");
	private static ResourceIterator<AutoEligibilityRel> getRating_3 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AutoEligibility.AE_04", DerivationController.RULE, _annotations_AE_04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_04:  -> AutoEligibility(_car,"eligible");
		// prereqs: []
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		
		
		// rule head
		
		return new SingletonIterator(new AutoEligibilityRel(_bindings._car,"eligible"));
        
		
		
		
	

	}
	// query: hasRating
	// rule: AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
	private static ResourceIterator<AutoEligibilityRel> hasRating_0 (final DerivationController _derivation ,  final Car car ,  final String eligibility ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AutoEligibility.AE_01", DerivationController.RULE, _annotations_AE_01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_01: PotentialOccupantInjuryRating(_car,"extremely high") -> AutoEligibility(_car,"not eligible");
		// prereqs: [PotentialOccupantInjuryRating(_car,"extremely high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(eligibility,"not eligible"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialOccupantInjuryRating(_car,"extremely high")
		
		
		 // case 4
					
					_tmp = PotentialOccupantInjuryRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"extremely high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AutoEligibilityRel(_bindings._car,"not eligible"));
        
		
		
		
	

	}
	// rule: AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
	private static ResourceIterator<AutoEligibilityRel> hasRating_1 (final DerivationController _derivation ,  final Car car ,  final String eligibility ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AutoEligibility.AE_02", DerivationController.RULE, _annotations_AE_02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_02: PotentialOccupantInjuryRating(_car,"high") -> AutoEligibility(_car,"provisional");
		// prereqs: [PotentialOccupantInjuryRating(_car,"high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(eligibility,"provisional"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialOccupantInjuryRating(_car,"high")
		
		
		 // case 4
					
					_tmp = PotentialOccupantInjuryRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AutoEligibilityRel(_bindings._car,"provisional"));
        
		
		
		
	

	}
	// rule: AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
	private static ResourceIterator<AutoEligibilityRel> hasRating_2 (final DerivationController _derivation ,  final Car car ,  final String eligibility ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AutoEligibility.AE_03", DerivationController.RULE, _annotations_AE_03);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_03: PotentialTheftRating(_car,"high") -> AutoEligibility(_car,"provisional");
		// prereqs: [PotentialTheftRating(_car,"high")]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(eligibility,"provisional"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite PotentialTheftRating(_car,"high")
		
		
		 // case 4
					
					_tmp = PotentialTheftRatingRelInstances.hasRating(_derivation.push(),_bindings._car,"high");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AutoEligibilityRel(_bindings._car,"provisional"));
        
		
		
		
	

	}
	// rule: AE_04:  -> AutoEligibility(_car,"eligible");
	private static ResourceIterator<AutoEligibilityRel> hasRating_3 (final DerivationController _derivation ,  final Car car ,  final String eligibility ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AutoEligibility.AE_04", DerivationController.RULE, _annotations_AE_04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_04:  -> AutoEligibility(_car,"eligible");
		// prereqs: []
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(eligibility,"eligible"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		
		
		// rule head
		
		return new SingletonIterator(new AutoEligibilityRel(_bindings._car,"eligible"));
        
		
		
		
	

	}
	
	
	// methods representing aggregation functions
	
	
}


