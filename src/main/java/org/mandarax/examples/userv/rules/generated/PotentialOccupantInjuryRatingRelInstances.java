package org.mandarax.examples.userv.rules.generated;
 
import org.mandarax.examples.userv.domain.*;

import org.mandarax.rt.*;

/**
 * Interface for queries for relationship <strong>PotentialOccupantInjuryRating</strong>.
 * Generated by org.mandarax.compiler.impl.DefaultCompiler.
 * @version Dec 2, 2010 1:53:25 PM 
 */
public class PotentialOccupantInjuryRatingRelInstances {
	// object references
	
	
	// fields representing annotations
	
	// rule: AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
	private final static java.util.Properties _annotations_AE_POIC01 = new java.util.Properties();
	
	// rule: AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
	private final static java.util.Properties _annotations_AE_POIC02 = new java.util.Properties();
	
	// rule: AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
	private final static java.util.Properties _annotations_AE_POIC03 = new java.util.Properties();
	
	// rule: AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
	private final static java.util.Properties _annotations_AE_POIC04 = new java.util.Properties();
	
	// rule: AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
	private final static java.util.Properties _annotations_AE_POIC05 = new java.util.Properties();
	
	
	// initialise annotations
	static {
		// relationship annotations for rule  AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
		_annotations_AE_POIC01.put("category","Auto Eligibility Rule Set");
		_annotations_AE_POIC01.put("author","Jens Dietrich");
		_annotations_AE_POIC01.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
		_annotations_AE_POIC01.put("description","If the car has no airbags, then the car's potential occupant injury rating is extremely high");
		
		
	
		// relationship annotations for rule  AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
		_annotations_AE_POIC02.put("category","Auto Eligibility Rule Set");
		_annotations_AE_POIC02.put("author","Jens Dietrich");
		_annotations_AE_POIC02.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
		_annotations_AE_POIC02.put("description","If the car only has driver's air bag, then the car's potential occupant injury rating is high");
		
		
	
		// relationship annotations for rule  AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
		_annotations_AE_POIC03.put("category","Auto Eligibility Rule Set");
		_annotations_AE_POIC03.put("author","Jens Dietrich");
		_annotations_AE_POIC03.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
		_annotations_AE_POIC03.put("description","If the car has driver's and front passenger air bags, then the car's potential occupant injury rating is moderate");
		
		
	
		// relationship annotations for rule  AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
		_annotations_AE_POIC04.put("category","Auto Eligibility Rule Set");
		_annotations_AE_POIC04.put("author","Jens Dietrich");
		_annotations_AE_POIC04.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
		_annotations_AE_POIC04.put("description","If the car has driver's front passenger and side panel air bags, then the car's potential occupant injury is low");
		
		
	
		// relationship annotations for rule  AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
		_annotations_AE_POIC05.put("category","Auto Eligibility Rule Set");
		_annotations_AE_POIC05.put("author","Jens Dietrich");
		_annotations_AE_POIC05.put("lastupdated","19/11/10");
		
		// rule annotations for rule  AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
		_annotations_AE_POIC05.put("description","If the car is a convertible and has no roll bar, then the potential occupant injury is extremely high");
		
		
	}
		
	

	// interface generated for queries	
	 
	public static ResultSet<PotentialOccupantInjuryRatingRel> getRating (  Car car  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<PotentialOccupantInjuryRatingRel>(getRating ( _derivation ,  car ),_derivation);
	} 
	 
	public static ResultSet<PotentialOccupantInjuryRatingRel> hasRating (  Car car ,  String rating  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<PotentialOccupantInjuryRatingRel>(hasRating ( _derivation ,  car ,  rating ),_derivation);
	} 
	
	
	// implementations - these methods are referenced by code generated from other rules in this package
	// and therefore kept static 
	 
	static ResourceIterator<PotentialOccupantInjuryRatingRel> getRating ( final DerivationController _derivation ,  final Car car  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<PotentialOccupantInjuryRatingRel>(5) {
			
			public ResourceIterator<PotentialOccupantInjuryRatingRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
                			return getRating_0(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 1: {
                			// invoke AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
                			return getRating_1(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 2: {
                			// invoke AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
                			return getRating_2(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 3: {
                			// invoke AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
                			return getRating_3(_derivation.pop(_derivationlevel) ,  car );
                		}
				
                		case 4: {
                			// invoke AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
                			return getRating_4(_derivation.pop(_derivationlevel) ,  car );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	 
	static ResourceIterator<PotentialOccupantInjuryRatingRel> hasRating ( final DerivationController _derivation ,  final Car car ,  final String rating  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<PotentialOccupantInjuryRatingRel>(5) {
			
			public ResourceIterator<PotentialOccupantInjuryRatingRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
                			return hasRating_0(_derivation.pop(_derivationlevel) ,  car ,  rating );
                		}
				
                		case 1: {
                			// invoke AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
                			return hasRating_1(_derivation.pop(_derivationlevel) ,  car ,  rating );
                		}
				
                		case 2: {
                			// invoke AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
                			return hasRating_2(_derivation.pop(_derivationlevel) ,  car ,  rating );
                		}
				
                		case 3: {
                			// invoke AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
                			return hasRating_3(_derivation.pop(_derivationlevel) ,  car ,  rating );
                		}
				
                		case 4: {
                			// invoke AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
                			return hasRating_4(_derivation.pop(_derivationlevel) ,  car ,  rating );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	
	
	
	// private methods - each method represents the invocation of a single rule for a certain query
	// query: getRating
	// rule: AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> getRating_0 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC01", DerivationController.RULE, _annotations_AE_POIC01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
		// prereqs: [!(_car.getHasAirbags())]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite !(_car.getHasAirbags())
		
		
		 // case 4
					if (!(!(_bindings._car.hasAirbags()))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"extremely high"));
        
		
		
		
	

	}
	// rule: AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> getRating_1 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC02", DerivationController.RULE, _annotations_AE_POIC02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
		// prereqs: [_car.getHasDriversAirbag(), !(_car.getHasFrontPassengerAirbag()), !(_car.getHasSidePanelAirbags())]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getHasDriversAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasDriversAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite !(_car.getHasFrontPassengerAirbag())
		
		
		 // case 4
					if (!(!(_bindings._car.hasFrontPassengerAirbag()))) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite !(_car.getHasSidePanelAirbags())
		
		
		 // case 4
					if (!(!(_bindings._car.hasSidePanelAirbags()))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"high"));
        
		
		
		
	

	}
	// rule: AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> getRating_2 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC03", DerivationController.RULE, _annotations_AE_POIC03);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
		// prereqs: [_car.getHasDriversAirbag(), _car.getHasFrontPassengerAirbag(), !(_car.getHasSidePanelAirbags())]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getHasDriversAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasDriversAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite _car.getHasFrontPassengerAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasFrontPassengerAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite !(_car.getHasSidePanelAirbags())
		
		
		 // case 4
					if (!(!(_bindings._car.hasSidePanelAirbags()))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"moderate"));
        
		
		
		
	

	}
	// rule: AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> getRating_3 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC04", DerivationController.RULE, _annotations_AE_POIC04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
		// prereqs: [_car.getHasDriversAirbag(), _car.getHasFrontPassengerAirbag(), _car.getHasSidePanelAirbags()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getHasDriversAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasDriversAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite _car.getHasFrontPassengerAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasFrontPassengerAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite _car.getHasSidePanelAirbags()
		
		
		 // case 4
					if (!(_bindings._car.hasSidePanelAirbags())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"low"));
        
		
		
		
	

	}
	// rule: AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> getRating_4 (final DerivationController _derivation ,  final Car car ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC05", DerivationController.RULE, _annotations_AE_POIC05);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
		// prereqs: [_car.getIsConvertible(), !(_car.getHasRollBar())]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getIsConvertible()
		
		
		 // case 4
					if (!(_bindings._car.isConvertible())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite !(_car.getHasRollBar())
		
		
		 // case 4
					if (!(!(_bindings._car.hasRollBar()))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"extremely high"));
        
		
		
		
	

	}
	// query: hasRating
	// rule: AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> hasRating_0 (final DerivationController _derivation ,  final Car car ,  final String rating ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC01", DerivationController.RULE, _annotations_AE_POIC01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC01: !(_car.getHasAirbags()) -> PotentialOccupantInjuryRating(_car,"extremely high");
		// prereqs: [!(_car.getHasAirbags())]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(rating,"extremely high"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite !(_car.getHasAirbags())
		
		
		 // case 4
					if (!(!(_bindings._car.hasAirbags()))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"extremely high"));
        
		
		
		
	

	}
	// rule: AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> hasRating_1 (final DerivationController _derivation ,  final Car car ,  final String rating ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC02", DerivationController.RULE, _annotations_AE_POIC02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC02: _car.getHasDriversAirbag() & !(_car.getHasFrontPassengerAirbag()) & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"high");
		// prereqs: [_car.getHasDriversAirbag(), !(_car.getHasFrontPassengerAirbag()), !(_car.getHasSidePanelAirbags())]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(rating,"high"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getHasDriversAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasDriversAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite !(_car.getHasFrontPassengerAirbag())
		
		
		 // case 4
					if (!(!(_bindings._car.hasFrontPassengerAirbag()))) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite !(_car.getHasSidePanelAirbags())
		
		
		 // case 4
					if (!(!(_bindings._car.hasSidePanelAirbags()))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"high"));
        
		
		
		
	

	}
	// rule: AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> hasRating_2 (final DerivationController _derivation ,  final Car car ,  final String rating ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC03", DerivationController.RULE, _annotations_AE_POIC03);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC03: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & !(_car.getHasSidePanelAirbags()) -> PotentialOccupantInjuryRating(_car,"moderate");
		// prereqs: [_car.getHasDriversAirbag(), _car.getHasFrontPassengerAirbag(), !(_car.getHasSidePanelAirbags())]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(rating,"moderate"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getHasDriversAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasDriversAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite _car.getHasFrontPassengerAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasFrontPassengerAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite !(_car.getHasSidePanelAirbags())
		
		
		 // case 4
					if (!(!(_bindings._car.hasSidePanelAirbags()))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"moderate"));
        
		
		
		
	

	}
	// rule: AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> hasRating_3 (final DerivationController _derivation ,  final Car car ,  final String rating ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC04", DerivationController.RULE, _annotations_AE_POIC04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC04: _car.getHasDriversAirbag() & _car.getHasFrontPassengerAirbag() & _car.getHasSidePanelAirbags() -> PotentialOccupantInjuryRating(_car,"low");
		// prereqs: [_car.getHasDriversAirbag(), _car.getHasFrontPassengerAirbag(), _car.getHasSidePanelAirbags()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(rating,"low"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getHasDriversAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasDriversAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite _car.getHasFrontPassengerAirbag()
		
		
		 // case 4
					if (!(_bindings._car.hasFrontPassengerAirbag())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite _car.getHasSidePanelAirbags()
		
		
		 // case 4
					if (!(_bindings._car.hasSidePanelAirbags())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"low"));
        
		
		
		
	

	}
	// rule: AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
	private static ResourceIterator<PotentialOccupantInjuryRatingRel> hasRating_4 (final DerivationController _derivation ,  final Car car ,  final String rating ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.PotentialOccupantInjuryRating.AE_POIC05", DerivationController.RULE, _annotations_AE_POIC05);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: AE_POIC05: _car.getIsConvertible() & !(_car.getHasRollBar()) -> PotentialOccupantInjuryRating(_car,"extremely high");
		// prereqs: [_car.getIsConvertible(), !(_car.getHasRollBar())]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(rating,"extremely high"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _car.getIsConvertible()
		
		
		 // case 4
					if (!(_bindings._car.isConvertible())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite !(_car.getHasRollBar())
		
		
		 // case 4
					if (!(!(_bindings._car.hasRollBar()))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new PotentialOccupantInjuryRatingRel(_bindings._car,"extremely high"));
        
		
		
		
	

	}
	
	
	// methods representing aggregation functions
	
	
}


