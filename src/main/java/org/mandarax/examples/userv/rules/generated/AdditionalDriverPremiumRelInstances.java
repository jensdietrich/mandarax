package org.mandarax.examples.userv.rules.generated;
 
import org.mandarax.examples.userv.domain.*;

import org.mandarax.rt.*;

/**
 * Interface for queries for relationship <strong>AdditionalDriverPremium</strong>.
 * Generated by org.mandarax.compiler.impl.DefaultCompiler.
 * @version Dec 2, 2010 1:53:25 PM 
 */
public class AdditionalDriverPremiumRelInstances {
	// object references
	
	
	// fields representing annotations
	
	// rule: DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
	private final static java.util.Properties _annotations_DP_01 = new java.util.Properties();
	
	// rule: DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
	private final static java.util.Properties _annotations_DP_02 = new java.util.Properties();
	
	// rule: DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
	private final static java.util.Properties _annotations_DP_03 = new java.util.Properties();
	
	// rule: DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
	private final static java.util.Properties _annotations_DP_04 = new java.util.Properties();
	
	// rule: DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
	private final static java.util.Properties _annotations_DP_05 = new java.util.Properties();
	
	// rule: DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
	private final static java.util.Properties _annotations_DP_06 = new java.util.Properties();
	
	// rule: DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
	private final static java.util.Properties _annotations_DP_08 = new java.util.Properties();
	
	// rule: DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 -> AdditionalDriverPremium(_driver,150*(_driver.getNumberOfAccidentsInvolvedIn()));
	private final static java.util.Properties _annotations_DP_09 = new java.util.Properties();
	
	// rule: MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
	private final static java.util.Properties _annotations_MSD_01 = new java.util.Properties();
	
	// rule: MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
	private final static java.util.Properties _annotations_MSD_02 = new java.util.Properties();
	
	
	// initialise annotations
	static {
		// relationship annotations for rule  DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
		_annotations_DP_01.put("category","Driver Premiums Rule Set");
		_annotations_DP_01.put("author","Jens Dietrich");
		_annotations_DP_01.put("lastupdated","19/11/10");
		
		// rule annotations for rule  DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
		_annotations_DP_01.put("description","If young driver and married and located in CA, NY or VA, then increase premium by $700");
		
		
	
		// relationship annotations for rule  DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
		_annotations_DP_02.put("category","Driver Premiums Rule Set");
		_annotations_DP_02.put("author","Jens Dietrich");
		_annotations_DP_02.put("lastupdated","19/11/10");
		
		// rule annotations for rule  DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
		_annotations_DP_02.put("description","If young driver and single and located in CA, NY or VA, then increase premium by $720");
		
		
	
		// relationship annotations for rule  DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
		_annotations_DP_03.put("category","Driver Premiums Rule Set");
		_annotations_DP_03.put("author","Jens Dietrich");
		_annotations_DP_03.put("lastupdated","19/11/10");
		
		// rule annotations for rule  DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
		
		
	
		// relationship annotations for rule  DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
		_annotations_DP_04.put("category","Driver Premiums Rule Set");
		_annotations_DP_04.put("author","Jens Dietrich");
		_annotations_DP_04.put("lastupdated","19/11/10");
		
		// rule annotations for rule  DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
		
		
	
		// relationship annotations for rule  DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
		_annotations_DP_05.put("category","Driver Premiums Rule Set");
		_annotations_DP_05.put("author","Jens Dietrich");
		_annotations_DP_05.put("lastupdated","19/11/10");
		
		// rule annotations for rule  DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
		_annotations_DP_05.put("description","If senior driver and located in CA, NY or VA, then increase premium by $500");
		
		
	
		// relationship annotations for rule  DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
		_annotations_DP_06.put("category","Driver Premiums Rule Set");
		_annotations_DP_06.put("author","Jens Dietrich");
		_annotations_DP_06.put("lastupdated","19/11/10");
		
		// rule annotations for rule  DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
		
		
	
		// relationship annotations for rule  DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
		_annotations_DP_08.put("category","Driver Premiums Rule Set");
		_annotations_DP_08.put("author","Jens Dietrich");
		_annotations_DP_08.put("lastupdated","19/11/10");
		
		// rule annotations for rule  DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
		_annotations_DP_08.put("description","If a High Risk Driver, then increase premium by $1,000");
		
		
	
		// relationship annotations for rule  DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 -> AdditionalDriverPremium(_driver,150*(_driver.getNumberOfAccidentsInvolvedIn()));
		_annotations_DP_09.put("category","Driver Premiums Rule Set");
		_annotations_DP_09.put("author","Jens Dietrich");
		_annotations_DP_09.put("lastupdated","19/11/10");
		
		// rule annotations for rule  DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 -> AdditionalDriverPremium(_driver,150*(_driver.getNumberOfAccidentsInvolvedIn()));
		_annotations_DP_09.put("description","Raise the premium by $ 150 per accident");
		
		
	
		// relationship annotations for rule  MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
		_annotations_MSD_01.put("category","Driver Premiums Rule Set");
		_annotations_MSD_01.put("author","Jens Dietrich");
		_annotations_MSD_01.put("lastupdated","19/11/10");
		
		// rule annotations for rule  MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
		_annotations_MSD_01.put("category","Market Discounts Rule Set");
		_annotations_MSD_01.put("description","If a preferred client, lower the premium by $250");
		
		
	
		// relationship annotations for rule  MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
		_annotations_MSD_02.put("category","Driver Premiums Rule Set");
		_annotations_MSD_02.put("author","Jens Dietrich");
		_annotations_MSD_02.put("lastupdated","19/11/10");
		
		// rule annotations for rule  MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
		_annotations_MSD_02.put("category","Market Discounts Rule Set");
		_annotations_MSD_02.put("description","If an elite client, then lower the premium by $500");
		
		
	}
		
	

	// interface generated for queries	
	 
	public static ResultSet<AdditionalDriverPremiumRel> getPremium (  Driver driver  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<AdditionalDriverPremiumRel>(getPremium ( _derivation ,  driver ),_derivation);
	} 
	 
	public static ResultSet<AdditionalDriverPremiumRel> hasPremium (  Driver driver ,  int premium  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<AdditionalDriverPremiumRel>(hasPremium ( _derivation ,  driver ,  premium ),_derivation);
	} 
	
	
	// implementations - these methods are referenced by code generated from other rules in this package
	// and therefore kept static 
	 
	static ResourceIterator<AdditionalDriverPremiumRel> getPremium ( final DerivationController _derivation ,  final Driver driver  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<AdditionalDriverPremiumRel>(10) {
			
			public ResourceIterator<AdditionalDriverPremiumRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
                			return getPremium_0(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 1: {
                			// invoke DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
                			return getPremium_1(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 2: {
                			// invoke DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
                			return getPremium_2(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 3: {
                			// invoke DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
                			return getPremium_3(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 4: {
                			// invoke DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
                			return getPremium_4(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 5: {
                			// invoke DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
                			return getPremium_5(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 6: {
                			// invoke DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
                			return getPremium_6(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 7: {
                			// invoke DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 -> AdditionalDriverPremium(_driver,150*(_driver.getNumberOfAccidentsInvolvedIn()));
                			return getPremium_7(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 8: {
                			// invoke MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
                			return getPremium_8(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
                		case 9: {
                			// invoke MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
                			return getPremium_9(_derivation.pop(_derivationlevel) ,  driver );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	 
	static ResourceIterator<AdditionalDriverPremiumRel> hasPremium ( final DerivationController _derivation ,  final Driver driver ,  final int premium  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<AdditionalDriverPremiumRel>(10) {
			
			public ResourceIterator<AdditionalDriverPremiumRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
                			return hasPremium_0(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 1: {
                			// invoke DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
                			return hasPremium_1(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 2: {
                			// invoke DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
                			return hasPremium_2(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 3: {
                			// invoke DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
                			return hasPremium_3(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 4: {
                			// invoke DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
                			return hasPremium_4(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 5: {
                			// invoke DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
                			return hasPremium_5(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 6: {
                			// invoke DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
                			return hasPremium_6(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 7: {
                			// invoke DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 -> AdditionalDriverPremium(_driver,150*(_driver.getNumberOfAccidentsInvolvedIn()));
                			return hasPremium_7(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 8: {
                			// invoke MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
                			return hasPremium_8(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
                		case 9: {
                			// invoke MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
                			return hasPremium_9(_derivation.pop(_derivationlevel) ,  driver ,  premium );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	
	
	
	// private methods - each method represents the invocation of a single rule for a certain query
	// query: getPremium
	// rule: DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_0 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_01", DerivationController.RULE, _annotations_DP_01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
		// prereqs: [_driver.getIsMarried(), DriverCategory(_driver,"young driver"), IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _driver.getIsMarried()
		
		
		 // case 4
					if (!(_bindings._driver.isMarried())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"young driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"young driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,700));
        
		
		
		
	

	}
	// rule: DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_1 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_02", DerivationController.RULE, _annotations_DP_02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
		// prereqs: [!(_driver.getIsMarried()), DriverCategory(_driver,"young driver"), IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite !(_driver.getIsMarried())
		
		
		 // case 4
					if (!(!(_bindings._driver.isMarried()))) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"young driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"young driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,720));
        
		
		
		
	

	}
	// rule: DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_2 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_03", DerivationController.RULE, _annotations_DP_03);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
		// prereqs: [_driver.getIsMarried(), DriverCategory(_driver,"young driver"), not IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _driver.getIsMarried()
		
		
		 // case 4
					if (!(_bindings._driver.isMarried())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"young driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"young driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite not IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,300));
        
		
		
		
	

	}
	// rule: DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_3 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_04", DerivationController.RULE, _annotations_DP_04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
		// prereqs: [!(_driver.getIsMarried()), DriverCategory(_driver,"young driver"), not IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite !(_driver.getIsMarried())
		
		
		 // case 4
					if (!(!(_bindings._driver.isMarried()))) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"young driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"young driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite not IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,300));
        
		
		
		
	

	}
	// rule: DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_4 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_05", DerivationController.RULE, _annotations_DP_05);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
		// prereqs: [DriverCategory(_driver,"senior driver"), IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"senior driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"senior driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,500));
        
		
		
		
	

	}
	// rule: DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_5 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_06", DerivationController.RULE, _annotations_DP_06);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
		// prereqs: [DriverCategory(_driver,"senior driver"), not IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"senior driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"senior driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite not IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,200));
        
		
		
		
	

	}
	// rule: DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_6 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_08", DerivationController.RULE, _annotations_DP_08);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
		// prereqs: [IsHighRiskDriver(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite IsHighRiskDriver(_driver)
		
		
		 // case 4
					
					_tmp = IsHighRiskDriverRelInstances.isHighRiskDriver(_derivation.push(),_bindings._driver);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,1000));
        
		
		
		
	

	}
	// rule: DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 -> AdditionalDriverPremium(_driver,150*(_driver.getNumberOfAccidentsInvolvedIn()));
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_7 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_09", DerivationController.RULE, _annotations_DP_09);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 -> AdditionalDriverPremium(_driver,150*(_driver.getNumberOfAccidentsInvolvedIn()));
		// prereqs: [(_driver.getNumberOfAccidentsInvolvedIn())>0]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		
		

		 
		
		
		
		// apply prerequisite (_driver.getNumberOfAccidentsInvolvedIn())>0
		
		
		 // case 4
					if (!((_bindings._driver.getNumberOfAccidentsInvolvedIn())>0)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,150*(_bindings._driver.getNumberOfAccidentsInvolvedIn())));
        
		
		
		
	

	}
	// rule: MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_8 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.MSD_01", DerivationController.RULE, _annotations_MSD_01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
		// prereqs: [client.getIsPreferred()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver client = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite client.getIsPreferred()
		
		
		 // case 4
					if (!(_bindings.client.isPreferred())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings.client,-250));
        
		
		
		
	

	}
	// rule: MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
	private static ResourceIterator<AdditionalDriverPremiumRel> getPremium_9 (final DerivationController _derivation ,  final Driver driver ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.MSD_02", DerivationController.RULE, _annotations_MSD_02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
		// prereqs: [client.getIsElite()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver client = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite client.getIsElite()
		
		
		 // case 4
					if (!(_bindings.client.isElite())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings.client,-500));
        
		
		
		
	

	}
	// query: hasPremium
	// rule: DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_0 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_01", DerivationController.RULE, _annotations_DP_01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_01: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,700);
		// prereqs: [_driver.getIsMarried(), DriverCategory(_driver,"young driver"), IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,700); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _driver.getIsMarried()
		
		
		 // case 4
					if (!(_bindings._driver.isMarried())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"young driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"young driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,700));
        
		
		
		
	

	}
	// rule: DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_1 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_02", DerivationController.RULE, _annotations_DP_02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_02: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,720);
		// prereqs: [!(_driver.getIsMarried()), DriverCategory(_driver,"young driver"), IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,720); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite !(_driver.getIsMarried())
		
		
		 // case 4
					if (!(!(_bindings._driver.isMarried()))) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"young driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"young driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,720));
        
		
		
		
	

	}
	// rule: DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_2 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_03", DerivationController.RULE, _annotations_DP_03);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_03: DriverCategory(_driver,"young driver") & _driver.getIsMarried() & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
		// prereqs: [_driver.getIsMarried(), DriverCategory(_driver,"young driver"), not IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,300); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite _driver.getIsMarried()
		
		
		 // case 4
					if (!(_bindings._driver.isMarried())) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"young driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"young driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite not IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,300));
        
		
		
		
	

	}
	// rule: DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_3 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_04", DerivationController.RULE, _annotations_DP_04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_04: DriverCategory(_driver,"young driver") & !(_driver.getIsMarried()) & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,300);
		// prereqs: [!(_driver.getIsMarried()), DriverCategory(_driver,"young driver"), not IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,300); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite !(_driver.getIsMarried())
		
		
		 // case 4
					if (!(!(_bindings._driver.isMarried()))) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"young driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"young driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite not IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,300));
        
		
		
		
	

	}
	// rule: DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_4 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_05", DerivationController.RULE, _annotations_DP_05);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_05: DriverCategory(_driver,"senior driver") & IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,500);
		// prereqs: [DriverCategory(_driver,"senior driver"), IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,500); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"senior driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"senior driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,500));
        
		
		
		
	

	}
	// rule: DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_5 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_06", DerivationController.RULE, _annotations_DP_06);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_06: DriverCategory(_driver,"senior driver") & not IsSpecialLocation(_driver) -> AdditionalDriverPremium(_driver,200);
		// prereqs: [DriverCategory(_driver,"senior driver"), not IsSpecialLocation(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,200); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite DriverCategory(_driver,"senior driver")
		
		
		 // case 4
					
					_tmp = DriverCategoryRelInstances.hasCategory(_derivation.push(),_bindings._driver,"senior driver");
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		 
		
		
		
		// apply prerequisite not IsSpecialLocation(_driver)
		
		
		 // case 4
					
					_tmp = IsSpecialLocationRelInstances.isSpecialLocation(_derivation.push(),_bindings._driver);
					
					if (_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,200));
        
		
		
		
	

	}
	// rule: DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_6 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_08", DerivationController.RULE, _annotations_DP_08);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_08: IsHighRiskDriver(_driver) -> AdditionalDriverPremium(_driver,1000);
		// prereqs: [IsHighRiskDriver(_driver)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,1000); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite IsHighRiskDriver(_driver)
		
		
		 // case 4
					
					_tmp = IsHighRiskDriverRelInstances.isHighRiskDriver(_derivation.push(),_bindings._driver);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,1000));
        
		
		
		
	

	}
	// rule: DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 -> AdditionalDriverPremium(_driver,150*(_driver.getNumberOfAccidentsInvolvedIn()));
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_7 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.DP_09", DerivationController.RULE, _annotations_DP_09);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: DP_09: (_driver.getNumberOfAccidentsInvolvedIn())>0 & __t0==(150*(_driver.getNumberOfAccidentsInvolvedIn())) -> AdditionalDriverPremium(_driver,__t0);
		// prereqs: [(_driver.getNumberOfAccidentsInvolvedIn())>0, __t0==(150*(_driver.getNumberOfAccidentsInvolvedIn()))]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver _driver = driver;
			private int __t0 = premium;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		
		

		 
		
		
		
		// apply prerequisite (_driver.getNumberOfAccidentsInvolvedIn())>0
		
		
		 // case 4
					if (!((_bindings._driver.getNumberOfAccidentsInvolvedIn())>0)) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite __t0==(150*(_driver.getNumberOfAccidentsInvolvedIn()))
		
		
		 // case 4
					if (!(org.mandarax.rt.Equals.compare(_bindings.__t0,150*(_bindings._driver.getNumberOfAccidentsInvolvedIn())))) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings._driver,_bindings.__t0));
        
		
		
		
	

	}
	// rule: MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_8 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.MSD_01", DerivationController.RULE, _annotations_MSD_01);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: MSD_01: client.getIsPreferred() -> AdditionalDriverPremium(client,-250);
		// prereqs: [client.getIsPreferred()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver client = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,-250); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite client.getIsPreferred()
		
		
		 // case 4
					if (!(_bindings.client.isPreferred())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings.client,-250));
        
		
		
		
	

	}
	// rule: MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
	private static ResourceIterator<AdditionalDriverPremiumRel> hasPremium_9 (final DerivationController _derivation ,  final Driver driver ,  final int premium ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.AdditionalDriverPremium.MSD_02", DerivationController.RULE, _annotations_MSD_02);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: MSD_02: client.getIsElite() -> AdditionalDriverPremium(client,-500);
		// prereqs: [client.getIsElite()]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Driver client = driver;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(premium,-500); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite client.getIsElite()
		
		
		 // case 4
					if (!(_bindings.client.isElite())) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new AdditionalDriverPremiumRel(_bindings.client,-500));
        
		
		
		
	

	}
	
	
	// methods representing aggregation functions
	
	
}


