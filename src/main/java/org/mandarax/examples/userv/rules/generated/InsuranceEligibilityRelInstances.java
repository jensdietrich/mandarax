package org.mandarax.examples.userv.rules.generated;
 
import org.mandarax.examples.userv.domain.*;

import org.mandarax.rt.*;

/**
 * Interface for queries for relationship <strong>InsuranceEligibility</strong>.
 * Generated by org.mandarax.compiler.impl.DefaultCompiler.
 * @version Dec 2, 2010 1:53:25 PM 
 */
public class InsuranceEligibilityRelInstances {
	// object references
	
	
	// fields representing annotations
	
	// rule: ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
	private final static java.util.Properties _annotations_ES_04 = new java.util.Properties();
	
	// rule: ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
	private final static java.util.Properties _annotations_ES_05 = new java.util.Properties();
	
	// rule: ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
	private final static java.util.Properties _annotations_ES_06 = new java.util.Properties();
	
	// rule: ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
	private final static java.util.Properties _annotations_ES_07 = new java.util.Properties();
	
	
	// initialise annotations
	static {
		// relationship annotations for rule  ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
		_annotations_ES_04.put("category","Eligibility Scoring Rule Set");
		_annotations_ES_04.put("author","Jens Dietrich");
		_annotations_ES_04.put("lastupdated","19/11/10");
		
		// rule annotations for rule  ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
		_annotations_ES_04.put("description","If eligibility score is less that 100, then client is eligible for insurance");
		
		
	
		// relationship annotations for rule  ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
		_annotations_ES_05.put("category","Eligibility Scoring Rule Set");
		_annotations_ES_05.put("author","Jens Dietrich");
		_annotations_ES_05.put("lastupdated","19/11/10");
		
		// rule annotations for rule  ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
		_annotations_ES_05.put("description","If eligibility score is between 100 and 250 inclusive, then the client's application/policy renewal must be reviewed by underwriting manager who will determine whether the client is eligible for auto insurance");
		
		
	
		// relationship annotations for rule  ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
		_annotations_ES_06.put("category","Eligibility Scoring Rule Set");
		_annotations_ES_06.put("author","Jens Dietrich");
		_annotations_ES_06.put("lastupdated","19/11/10");
		
		// rule annotations for rule  ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
		_annotations_ES_06.put("description","If eligibility score is greater than 250, the client is not eligible for auto insurance");
		
		
	
		// relationship annotations for rule  ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
		_annotations_ES_07.put("category","Eligibility Scoring Rule Set");
		_annotations_ES_07.put("author","Jens Dietrich");
		_annotations_ES_07.put("lastupdated","19/11/10");
		
		// rule annotations for rule  ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
		_annotations_ES_07.put("description","If a long term client, the client is always eligible for auto insurance, as is every person and car directly covered by a long term client's auto policy");
		
		
	}
		
	

	// interface generated for queries	
	 
	public static ResultSet<InsuranceEligibilityRel> getEligibility (  Car car ,  Driver client  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<InsuranceEligibilityRel>(getEligibility ( _derivation ,  car ,  client ),_derivation);
	} 
	 
	public static ResultSet<InsuranceEligibilityRel> hasEligibility (  Car car ,  Driver client ,  String eligibility  ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<InsuranceEligibilityRel>(hasEligibility ( _derivation ,  car ,  client ,  eligibility ),_derivation);
	} 
	
	
	// implementations - these methods are referenced by code generated from other rules in this package
	// and therefore kept static 
	 
	static ResourceIterator<InsuranceEligibilityRel> getEligibility ( final DerivationController _derivation ,  final Car car ,  final Driver client  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<InsuranceEligibilityRel>(4) {
			
			public ResourceIterator<InsuranceEligibilityRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
                			return getEligibility_0(_derivation.pop(_derivationlevel) ,  car ,  client );
                		}
				
                		case 1: {
                			// invoke ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
                			return getEligibility_1(_derivation.pop(_derivationlevel) ,  car ,  client );
                		}
				
                		case 2: {
                			// invoke ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
                			return getEligibility_2(_derivation.pop(_derivationlevel) ,  car ,  client );
                		}
				
                		case 3: {
                			// invoke ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
                			return getEligibility_3(_derivation.pop(_derivationlevel) ,  car ,  client );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	 
	static ResourceIterator<InsuranceEligibilityRel> hasEligibility ( final DerivationController _derivation ,  final Car car ,  final Driver client ,  final String eligibility  ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<InsuranceEligibilityRel>(4) {
			
			public ResourceIterator<InsuranceEligibilityRel> getNextIterator(int pos) {
			switch (pos) {
				
                		case 0: {
                			// invoke ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
                			return hasEligibility_0(_derivation.pop(_derivationlevel) ,  car ,  client ,  eligibility );
                		}
				
                		case 1: {
                			// invoke ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
                			return hasEligibility_1(_derivation.pop(_derivationlevel) ,  car ,  client ,  eligibility );
                		}
				
                		case 2: {
                			// invoke ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
                			return hasEligibility_2(_derivation.pop(_derivationlevel) ,  car ,  client ,  eligibility );
                		}
				
                		case 3: {
                			// invoke ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
                			return hasEligibility_3(_derivation.pop(_derivationlevel) ,  car ,  client ,  eligibility );
                		}
				
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	
	
	
	// private methods - each method represents the invocation of a single rule for a certain query
	// query: getEligibility
	// rule: ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
	private static ResourceIterator<InsuranceEligibilityRel> getEligibility_0 (final DerivationController _derivation ,  final Car car ,  final Driver client ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.InsuranceEligibility.ES_04", DerivationController.RULE, _annotations_ES_04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
		// prereqs: [(_sum_0(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))<100]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
			private org.mandarax.examples.userv.domain.Driver _client = client;
			private int score = 0;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_sum_0(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))<100
		
		
		 // case 4
					if (!((_sum_0(PolicyEligibilityScoreRelInstances.getScore(_bindings._car,_bindings._client)))<100)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new InsuranceEligibilityRel(_bindings._car,_bindings._client,"eligible"));
        
		
		
		
	

	}
	// rule: ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
	private static ResourceIterator<InsuranceEligibilityRel> getEligibility_1 (final DerivationController _derivation ,  final Car car ,  final Driver client ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.InsuranceEligibility.ES_05", DerivationController.RULE, _annotations_ES_05);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
		// prereqs: [(_sum_1(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))>=100, (_sum_2(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))<=250]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
			private org.mandarax.examples.userv.domain.Driver _client = client;
			private int score = 0;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_sum_1(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))>=100
		
		
		 // case 4
					if (!((_sum_1(PolicyEligibilityScoreRelInstances.getScore(_bindings._car,_bindings._client)))>=100)) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite (_sum_2(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))<=250
		
		
		 // case 4
					if (!((_sum_2(PolicyEligibilityScoreRelInstances.getScore(_bindings._car,_bindings._client)))<=250)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new InsuranceEligibilityRel(_bindings._car,_bindings._client,"must be reviewed by underwriting manager"));
        
		
		
		
	

	}
	// rule: ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
	private static ResourceIterator<InsuranceEligibilityRel> getEligibility_2 (final DerivationController _derivation ,  final Car car ,  final Driver client ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.InsuranceEligibility.ES_06", DerivationController.RULE, _annotations_ES_06);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
		// prereqs: [(_sum_3(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))>250]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
			private org.mandarax.examples.userv.domain.Driver _client = client;
			private int score = 0;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_sum_3(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))>250
		
		
		 // case 4
					if (!((_sum_3(PolicyEligibilityScoreRelInstances.getScore(_bindings._car,_bindings._client)))>250)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new InsuranceEligibilityRel(_bindings._car,_bindings._client,"not eligible"));
        
		
		
		
	

	}
	// rule: ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
	private static ResourceIterator<InsuranceEligibilityRel> getEligibility_3 (final DerivationController _derivation ,  final Car car ,  final Driver client ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.InsuranceEligibility.ES_07", DerivationController.RULE, _annotations_ES_07);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
		// prereqs: [IsLongTermClient(_client)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
			private org.mandarax.examples.userv.domain.Driver _client = client;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite IsLongTermClient(_client)
		
		
		 // case 4
					
					_tmp = IsLongTermClientRelInstances.isLongTermClient(_derivation.push(),_bindings._client);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new InsuranceEligibilityRel(_bindings._car,_bindings._client,"eligible"));
        
		
		
		
	

	}
	// query: hasEligibility
	// rule: ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
	private static ResourceIterator<InsuranceEligibilityRel> hasEligibility_0 (final DerivationController _derivation ,  final Car car ,  final Driver client ,  final String eligibility ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.InsuranceEligibility.ES_04", DerivationController.RULE, _annotations_ES_04);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: ES_04: (sum score in PolicyEligibilityScore(_car,_client,score))<100 -> InsuranceEligibility(_car,_client,"eligible");
		// prereqs: [(_sum_4(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))<100]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
			private org.mandarax.examples.userv.domain.Driver _client = client;
			private int score = 0;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(eligibility,"eligible"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_sum_4(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))<100
		
		
		 // case 4
					if (!((_sum_4(PolicyEligibilityScoreRelInstances.getScore(_bindings._car,_bindings._client)))<100)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new InsuranceEligibilityRel(_bindings._car,_bindings._client,"eligible"));
        
		
		
		
	

	}
	// rule: ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
	private static ResourceIterator<InsuranceEligibilityRel> hasEligibility_1 (final DerivationController _derivation ,  final Car car ,  final Driver client ,  final String eligibility ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.InsuranceEligibility.ES_05", DerivationController.RULE, _annotations_ES_05);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: ES_05: (sum score in PolicyEligibilityScore(_car,_client,score))>=100 & (sum score in PolicyEligibilityScore(_car,_client,score))<=250 -> InsuranceEligibility(_car,_client,"must be reviewed by underwriting manager");
		// prereqs: [(_sum_5(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))>=100, (_sum_6(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))<=250]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
			private org.mandarax.examples.userv.domain.Driver _client = client;
			private int score = 0;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(eligibility,"must be reviewed by underwriting manager"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_sum_5(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))>=100
		
		
		 // case 4
					if (!((_sum_5(PolicyEligibilityScoreRelInstances.getScore(_bindings._car,_bindings._client)))>=100)) {return EmptyIterator.DEFAULT;} 
					
		 
		
		
		
		// apply prerequisite (_sum_6(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))<=250
		
		
		 // case 4
					if (!((_sum_6(PolicyEligibilityScoreRelInstances.getScore(_bindings._car,_bindings._client)))<=250)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new InsuranceEligibilityRel(_bindings._car,_bindings._client,"must be reviewed by underwriting manager"));
        
		
		
		
	

	}
	// rule: ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
	private static ResourceIterator<InsuranceEligibilityRel> hasEligibility_2 (final DerivationController _derivation ,  final Car car ,  final Driver client ,  final String eligibility ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.InsuranceEligibility.ES_06", DerivationController.RULE, _annotations_ES_06);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: ES_06: (sum score in PolicyEligibilityScore(_car,_client,score))>250 -> InsuranceEligibility(_car,_client,"not eligible");
		// prereqs: [(_sum_7(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))>250]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
			private org.mandarax.examples.userv.domain.Driver _client = client;
			private int score = 0;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(eligibility,"not eligible"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite (_sum_7(PolicyEligibilityScoreRelInstances.getScore(_car,_client)))>250
		
		
		 // case 4
					if (!((_sum_7(PolicyEligibilityScoreRelInstances.getScore(_bindings._car,_bindings._client)))>250)) {return EmptyIterator.DEFAULT;} 
					
		
		
		// rule head
		
		return new SingletonIterator(new InsuranceEligibilityRel(_bindings._car,_bindings._client,"not eligible"));
        
		
		
		
	

	}
	// rule: ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
	private static ResourceIterator<InsuranceEligibilityRel> hasEligibility_3 (final DerivationController _derivation ,  final Car car ,  final Driver client ,  final String eligibility ) {
		
		_derivation.log("org.mandarax.examples.userv.rules.generated.InsuranceEligibility.ES_07", DerivationController.RULE, _annotations_ES_07);
		
			
	
		
		// utility class used to keep track of variables bindings
		// rule: ES_07: IsLongTermClient(_client) -> InsuranceEligibility(_car,_client,"eligible");
		// prereqs: [IsLongTermClient(_client)]
		class _Bindings {
			private org.mandarax.examples.userv.domain.Car _car = car;
			private org.mandarax.examples.userv.domain.Driver _client = client;
		}
		final _Bindings _bindings = new _Bindings();
		ResourceIterator<?> _tmp = null;
		
		 
		
		
		
		 
		// check conditions	
		boolean _checkfailed = false;
		
		
		
		
		
		_checkfailed = _checkfailed || !Equals.compare(eligibility,"eligible"); 
		
		if (_checkfailed) {
			return EmptyIterator.DEFAULT;
		}
		
		

		 
		
		
		
		// apply prerequisite IsLongTermClient(_client)
		
		
		 // case 4
					
					_tmp = IsLongTermClientRelInstances.isLongTermClient(_derivation.push(),_bindings._client);
					
					if (!_tmp.hasNext()) {
						_tmp.close();
						return EmptyIterator.DEFAULT;
					}
					
					
		
		
		// rule head
		
		return new SingletonIterator(new InsuranceEligibilityRel(_bindings._car,_bindings._client,"eligible"));
        
		
		
		
	

	}
	
	
	// methods representing aggregation functions
	 
	
	
	
	// agg _sum_0(PolicyEligibilityScoreRelInstances.getScore(_car,_client)) type is sum
	 	static int _sum_0 (ResourceIterator<PolicyEligibilityScoreRel> _rel) {
		int _v = 0 ;
		
		while (_rel.hasNext()) {
			_v = _v + _rel.next().score;
		}
		_rel.close();
		return _v;
	}
	
	
	

	
	 
	
	
	
	// agg _sum_1(PolicyEligibilityScoreRelInstances.getScore(_car,_client)) type is sum
	 	static int _sum_1 (ResourceIterator<PolicyEligibilityScoreRel> _rel) {
		int _v = 0 ;
		
		while (_rel.hasNext()) {
			_v = _v + _rel.next().score;
		}
		_rel.close();
		return _v;
	}
	
	
	

	
	 
	
	
	
	// agg _sum_2(PolicyEligibilityScoreRelInstances.getScore(_car,_client)) type is sum
	 	static int _sum_2 (ResourceIterator<PolicyEligibilityScoreRel> _rel) {
		int _v = 0 ;
		
		while (_rel.hasNext()) {
			_v = _v + _rel.next().score;
		}
		_rel.close();
		return _v;
	}
	
	
	

	
	 
	
	
	
	// agg _sum_3(PolicyEligibilityScoreRelInstances.getScore(_car,_client)) type is sum
	 	static int _sum_3 (ResourceIterator<PolicyEligibilityScoreRel> _rel) {
		int _v = 0 ;
		
		while (_rel.hasNext()) {
			_v = _v + _rel.next().score;
		}
		_rel.close();
		return _v;
	}
	
	
	

	
	 
	
	
	
	// agg _sum_4(PolicyEligibilityScoreRelInstances.getScore(_car,_client)) type is sum
	 	static int _sum_4 (ResourceIterator<PolicyEligibilityScoreRel> _rel) {
		int _v = 0 ;
		
		while (_rel.hasNext()) {
			_v = _v + _rel.next().score;
		}
		_rel.close();
		return _v;
	}
	
	
	

	
	 
	
	
	
	// agg _sum_5(PolicyEligibilityScoreRelInstances.getScore(_car,_client)) type is sum
	 	static int _sum_5 (ResourceIterator<PolicyEligibilityScoreRel> _rel) {
		int _v = 0 ;
		
		while (_rel.hasNext()) {
			_v = _v + _rel.next().score;
		}
		_rel.close();
		return _v;
	}
	
	
	

	
	 
	
	
	
	// agg _sum_6(PolicyEligibilityScoreRelInstances.getScore(_car,_client)) type is sum
	 	static int _sum_6 (ResourceIterator<PolicyEligibilityScoreRel> _rel) {
		int _v = 0 ;
		
		while (_rel.hasNext()) {
			_v = _v + _rel.next().score;
		}
		_rel.close();
		return _v;
	}
	
	
	

	
	 
	
	
	
	// agg _sum_7(PolicyEligibilityScoreRelInstances.getScore(_car,_client)) type is sum
	 	static int _sum_7 (ResourceIterator<PolicyEligibilityScoreRel> _rel) {
		int _v = 0 ;
		
		while (_rel.hasNext()) {
			_v = _v + _rel.next().score;
		}
		_rel.close();
		return _v;
	}
	
	
	

	
	
	
}


